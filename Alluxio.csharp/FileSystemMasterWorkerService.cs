/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class FileSystemMasterWorkerService {
  /// <summary>
  /// This interface contains file system master service endpoints for Alluxio workers.
  /// </summary>
  public interface Iface : AlluxioService.Iface {
    FileInfo getFileInfo(long fileId);
    #if SILVERLIGHT
    IAsyncResult Begin_getFileInfo(AsyncCallback callback, object state, long fileId);
    FileInfo End_getFileInfo(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns the set of pinned files.
    /// </summary>
    THashSet<long> getPinIdList();
    #if SILVERLIGHT
    IAsyncResult Begin_getPinIdList(AsyncCallback callback, object state);
    THashSet<long> End_getPinIdList(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Periodic file system worker heartbeat. Returns the command for persisting
    /// the blocks of a file.
    /// </summary>
    /// <param name="workerId">the id of the worker</param>
    /// <param name="persistedFiles">the list of persisted files</param>
    FileSystemCommand heartbeat(long workerId, List<long> persistedFiles);
    #if SILVERLIGHT
    IAsyncResult Begin_heartbeat(AsyncCallback callback, object state, long workerId, List<long> persistedFiles);
    FileSystemCommand End_heartbeat(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// This interface contains file system master service endpoints for Alluxio workers.
  /// </summary>
  public class Client : AlluxioService.Client, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
    {
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getFileInfo(AsyncCallback callback, object state, long fileId)
    {
      return send_getFileInfo(callback, state, fileId);
    }

    public FileInfo End_getFileInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFileInfo();
    }

    #endif

    public FileInfo getFileInfo(long fileId)
    {
      #if !SILVERLIGHT
      send_getFileInfo(fileId);
      return recv_getFileInfo();

      #else
      var asyncResult = Begin_getFileInfo(null, null, fileId);
      return End_getFileInfo(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFileInfo(AsyncCallback callback, object state, long fileId)
    #else
    public void send_getFileInfo(long fileId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getFileInfo", TMessageType.Call, seqid_));
      getFileInfo_args args = new getFileInfo_args();
      args.FileId = fileId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public FileInfo recv_getFileInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFileInfo_result result = new getFileInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFileInfo failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getPinIdList(AsyncCallback callback, object state)
    {
      return send_getPinIdList(callback, state);
    }

    public THashSet<long> End_getPinIdList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPinIdList();
    }

    #endif

    /// <summary>
    /// Returns the set of pinned files.
    /// </summary>
    public THashSet<long> getPinIdList()
    {
      #if !SILVERLIGHT
      send_getPinIdList();
      return recv_getPinIdList();

      #else
      var asyncResult = Begin_getPinIdList(null, null);
      return End_getPinIdList(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPinIdList(AsyncCallback callback, object state)
    #else
    public void send_getPinIdList()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getPinIdList", TMessageType.Call, seqid_));
      getPinIdList_args args = new getPinIdList_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public THashSet<long> recv_getPinIdList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPinIdList_result result = new getPinIdList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPinIdList failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_heartbeat(AsyncCallback callback, object state, long workerId, List<long> persistedFiles)
    {
      return send_heartbeat(callback, state, workerId, persistedFiles);
    }

    public FileSystemCommand End_heartbeat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_heartbeat();
    }

    #endif

    /// <summary>
    /// Periodic file system worker heartbeat. Returns the command for persisting
    /// the blocks of a file.
    /// </summary>
    /// <param name="workerId">the id of the worker</param>
    /// <param name="persistedFiles">the list of persisted files</param>
    public FileSystemCommand heartbeat(long workerId, List<long> persistedFiles)
    {
      #if !SILVERLIGHT
      send_heartbeat(workerId, persistedFiles);
      return recv_heartbeat();

      #else
      var asyncResult = Begin_heartbeat(null, null, workerId, persistedFiles);
      return End_heartbeat(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_heartbeat(AsyncCallback callback, object state, long workerId, List<long> persistedFiles)
    #else
    public void send_heartbeat(long workerId, List<long> persistedFiles)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("heartbeat", TMessageType.Call, seqid_));
      heartbeat_args args = new heartbeat_args();
      args.WorkerId = workerId;
      args.PersistedFiles = persistedFiles;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public FileSystemCommand recv_heartbeat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      heartbeat_result result = new heartbeat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "heartbeat failed: unknown result");
    }

  }
  public class Processor : AlluxioService.Processor, TProcessor {
    public Processor(Iface iface) : base(iface)
    {
      iface_ = iface;
      processMap_["getFileInfo"] = getFileInfo_Process;
      processMap_["getPinIdList"] = getPinIdList_Process;
      processMap_["heartbeat"] = heartbeat_Process;
    }

    private Iface iface_;

    public new bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getFileInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFileInfo_args args = new getFileInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFileInfo_result result = new getFileInfo_result();
      try {
        result.Success = iface_.getFileInfo(args.FileId);
      } catch (AlluxioTException e) {
        result.E = e;
      }
      oprot.WriteMessageBegin(new TMessage("getFileInfo", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPinIdList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPinIdList_args args = new getPinIdList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPinIdList_result result = new getPinIdList_result();
      result.Success = iface_.getPinIdList();
      oprot.WriteMessageBegin(new TMessage("getPinIdList", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void heartbeat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      heartbeat_args args = new heartbeat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      heartbeat_result result = new heartbeat_result();
      try {
        result.Success = iface_.heartbeat(args.WorkerId, args.PersistedFiles);
      } catch (AlluxioTException e) {
        result.E = e;
      }
      oprot.WriteMessageBegin(new TMessage("heartbeat", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFileInfo_args : TBase
  {
    private long _fileId;

    /// <summary>
    /// the id of the file
    /// </summary>
    public long FileId
    {
      get
      {
        return _fileId;
      }
      set
      {
        __isset.fileId = true;
        this._fileId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool fileId;
    }

    public getFileInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                FileId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFileInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.fileId) {
          field.Name = "fileId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(FileId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFileInfo_args(");
      bool __first = true;
      if (__isset.fileId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FileId: ");
        __sb.Append(FileId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFileInfo_result : TBase
  {
    private FileInfo _success;
    private AlluxioTException _e;

    public FileInfo Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getFileInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FileInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFileInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFileInfo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPinIdList_args : TBase
  {

    public getPinIdList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPinIdList_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPinIdList_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPinIdList_result : TBase
  {
    private THashSet<long> _success;

    public THashSet<long> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getPinIdList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Set) {
                {
                  Success = new THashSet<long>();
                  TSet _set37 = iprot.ReadSetBegin();
                  for( int _i38 = 0; _i38 < _set37.Count; ++_i38)
                  {
                    long _elem39;
                    _elem39 = iprot.ReadI64();
                    Success.Add(_elem39);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPinIdList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Set;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteSetBegin(new TSet(TType.I64, Success.Count));
              foreach (long _iter40 in Success)
              {
                oprot.WriteI64(_iter40);
              }
              oprot.WriteSetEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPinIdList_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class heartbeat_args : TBase
  {
    private long _workerId;
    private List<long> _persistedFiles;

    /// <summary>
    /// the id of the worker
    /// </summary>
    public long WorkerId
    {
      get
      {
        return _workerId;
      }
      set
      {
        __isset.workerId = true;
        this._workerId = value;
      }
    }

    /// <summary>
    /// the list of persisted files
    /// </summary>
    public List<long> PersistedFiles
    {
      get
      {
        return _persistedFiles;
      }
      set
      {
        __isset.persistedFiles = true;
        this._persistedFiles = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool workerId;
      public bool persistedFiles;
    }

    public heartbeat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                WorkerId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  PersistedFiles = new List<long>();
                  TList _list41 = iprot.ReadListBegin();
                  for( int _i42 = 0; _i42 < _list41.Count; ++_i42)
                  {
                    long _elem43;
                    _elem43 = iprot.ReadI64();
                    PersistedFiles.Add(_elem43);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("heartbeat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.workerId) {
          field.Name = "workerId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(WorkerId);
          oprot.WriteFieldEnd();
        }
        if (PersistedFiles != null && __isset.persistedFiles) {
          field.Name = "persistedFiles";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I64, PersistedFiles.Count));
            foreach (long _iter44 in PersistedFiles)
            {
              oprot.WriteI64(_iter44);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("heartbeat_args(");
      bool __first = true;
      if (__isset.workerId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WorkerId: ");
        __sb.Append(WorkerId);
      }
      if (PersistedFiles != null && __isset.persistedFiles) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PersistedFiles: ");
        __sb.Append(PersistedFiles);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class heartbeat_result : TBase
  {
    private FileSystemCommand _success;
    private AlluxioTException _e;

    public FileSystemCommand Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public heartbeat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FileSystemCommand();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("heartbeat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("heartbeat_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
