/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class BlockMasterClientService {
  /// <summary>
  /// This interface contains block master service endpoints for Alluxio clients.
  /// </summary>
  public interface Iface : AlluxioService.Iface {
    /// <summary>
    /// Returns the block information for the given block id.
    /// </summary>
    /// <param name="blockId">the id of the block</param>
    BlockInfo getBlockInfo(long blockId);
    #if SILVERLIGHT
    IAsyncResult Begin_getBlockInfo(AsyncCallback callback, object state, long blockId);
    BlockInfo End_getBlockInfo(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns the capacity (in bytes).
    /// </summary>
    long getCapacityBytes();
    #if SILVERLIGHT
    IAsyncResult Begin_getCapacityBytes(AsyncCallback callback, object state);
    long End_getCapacityBytes(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns the used storage (in bytes).
    /// </summary>
    long getUsedBytes();
    #if SILVERLIGHT
    IAsyncResult Begin_getUsedBytes(AsyncCallback callback, object state);
    long End_getUsedBytes(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns a list of workers information.
    /// </summary>
    List<WorkerInfo> getWorkerInfoList();
    #if SILVERLIGHT
    IAsyncResult Begin_getWorkerInfoList(AsyncCallback callback, object state);
    List<WorkerInfo> End_getWorkerInfoList(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// This interface contains block master service endpoints for Alluxio clients.
  /// </summary>
  public class Client : AlluxioService.Client, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
    {
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getBlockInfo(AsyncCallback callback, object state, long blockId)
    {
      return send_getBlockInfo(callback, state, blockId);
    }

    public BlockInfo End_getBlockInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getBlockInfo();
    }

    #endif

    /// <summary>
    /// Returns the block information for the given block id.
    /// </summary>
    /// <param name="blockId">the id of the block</param>
    public BlockInfo getBlockInfo(long blockId)
    {
      #if !SILVERLIGHT
      send_getBlockInfo(blockId);
      return recv_getBlockInfo();

      #else
      var asyncResult = Begin_getBlockInfo(null, null, blockId);
      return End_getBlockInfo(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getBlockInfo(AsyncCallback callback, object state, long blockId)
    #else
    public void send_getBlockInfo(long blockId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getBlockInfo", TMessageType.Call, seqid_));
      getBlockInfo_args args = new getBlockInfo_args();
      args.BlockId = blockId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public BlockInfo recv_getBlockInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getBlockInfo_result result = new getBlockInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlockInfo failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getCapacityBytes(AsyncCallback callback, object state)
    {
      return send_getCapacityBytes(callback, state);
    }

    public long End_getCapacityBytes(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCapacityBytes();
    }

    #endif

    /// <summary>
    /// Returns the capacity (in bytes).
    /// </summary>
    public long getCapacityBytes()
    {
      #if !SILVERLIGHT
      send_getCapacityBytes();
      return recv_getCapacityBytes();

      #else
      var asyncResult = Begin_getCapacityBytes(null, null);
      return End_getCapacityBytes(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCapacityBytes(AsyncCallback callback, object state)
    #else
    public void send_getCapacityBytes()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getCapacityBytes", TMessageType.Call, seqid_));
      getCapacityBytes_args args = new getCapacityBytes_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_getCapacityBytes()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCapacityBytes_result result = new getCapacityBytes_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCapacityBytes failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getUsedBytes(AsyncCallback callback, object state)
    {
      return send_getUsedBytes(callback, state);
    }

    public long End_getUsedBytes(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUsedBytes();
    }

    #endif

    /// <summary>
    /// Returns the used storage (in bytes).
    /// </summary>
    public long getUsedBytes()
    {
      #if !SILVERLIGHT
      send_getUsedBytes();
      return recv_getUsedBytes();

      #else
      var asyncResult = Begin_getUsedBytes(null, null);
      return End_getUsedBytes(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUsedBytes(AsyncCallback callback, object state)
    #else
    public void send_getUsedBytes()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getUsedBytes", TMessageType.Call, seqid_));
      getUsedBytes_args args = new getUsedBytes_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_getUsedBytes()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUsedBytes_result result = new getUsedBytes_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUsedBytes failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getWorkerInfoList(AsyncCallback callback, object state)
    {
      return send_getWorkerInfoList(callback, state);
    }

    public List<WorkerInfo> End_getWorkerInfoList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getWorkerInfoList();
    }

    #endif

    /// <summary>
    /// Returns a list of workers information.
    /// </summary>
    public List<WorkerInfo> getWorkerInfoList()
    {
      #if !SILVERLIGHT
      send_getWorkerInfoList();
      return recv_getWorkerInfoList();

      #else
      var asyncResult = Begin_getWorkerInfoList(null, null);
      return End_getWorkerInfoList(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getWorkerInfoList(AsyncCallback callback, object state)
    #else
    public void send_getWorkerInfoList()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getWorkerInfoList", TMessageType.Call, seqid_));
      getWorkerInfoList_args args = new getWorkerInfoList_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<WorkerInfo> recv_getWorkerInfoList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getWorkerInfoList_result result = new getWorkerInfoList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getWorkerInfoList failed: unknown result");
    }

  }
  public class Processor : AlluxioService.Processor, TProcessor {
    public Processor(Iface iface) : base(iface)
    {
      iface_ = iface;
      processMap_["getBlockInfo"] = getBlockInfo_Process;
      processMap_["getCapacityBytes"] = getCapacityBytes_Process;
      processMap_["getUsedBytes"] = getUsedBytes_Process;
      processMap_["getWorkerInfoList"] = getWorkerInfoList_Process;
    }

    private Iface iface_;

    public new bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getBlockInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getBlockInfo_args args = new getBlockInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getBlockInfo_result result = new getBlockInfo_result();
      try {
        result.Success = iface_.getBlockInfo(args.BlockId);
      } catch (AlluxioTException e) {
        result.E = e;
      }
      oprot.WriteMessageBegin(new TMessage("getBlockInfo", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCapacityBytes_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCapacityBytes_args args = new getCapacityBytes_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCapacityBytes_result result = new getCapacityBytes_result();
      result.Success = iface_.getCapacityBytes();
      oprot.WriteMessageBegin(new TMessage("getCapacityBytes", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUsedBytes_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUsedBytes_args args = new getUsedBytes_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUsedBytes_result result = new getUsedBytes_result();
      result.Success = iface_.getUsedBytes();
      oprot.WriteMessageBegin(new TMessage("getUsedBytes", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getWorkerInfoList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getWorkerInfoList_args args = new getWorkerInfoList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getWorkerInfoList_result result = new getWorkerInfoList_result();
      result.Success = iface_.getWorkerInfoList();
      oprot.WriteMessageBegin(new TMessage("getWorkerInfoList", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBlockInfo_args : TBase
  {
    private long _blockId;

    /// <summary>
    /// the id of the block
    /// </summary>
    public long BlockId
    {
      get
      {
        return _blockId;
      }
      set
      {
        __isset.blockId = true;
        this._blockId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool blockId;
    }

    public getBlockInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                BlockId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBlockInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.blockId) {
          field.Name = "blockId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(BlockId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBlockInfo_args(");
      bool __first = true;
      if (__isset.blockId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BlockId: ");
        __sb.Append(BlockId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBlockInfo_result : TBase
  {
    private BlockInfo _success;
    private AlluxioTException _e;

    public BlockInfo Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getBlockInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BlockInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBlockInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBlockInfo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCapacityBytes_args : TBase
  {

    public getCapacityBytes_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCapacityBytes_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCapacityBytes_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCapacityBytes_result : TBase
  {
    private long _success;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getCapacityBytes_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCapacityBytes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCapacityBytes_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUsedBytes_args : TBase
  {

    public getUsedBytes_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUsedBytes_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUsedBytes_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUsedBytes_result : TBase
  {
    private long _success;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getUsedBytes_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUsedBytes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUsedBytes_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getWorkerInfoList_args : TBase
  {

    public getWorkerInfoList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getWorkerInfoList_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getWorkerInfoList_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getWorkerInfoList_result : TBase
  {
    private List<WorkerInfo> _success;

    public List<WorkerInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getWorkerInfoList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<WorkerInfo>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    WorkerInfo _elem2;
                    _elem2 = new WorkerInfo();
                    _elem2.Read(iprot);
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getWorkerInfoList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (WorkerInfo _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getWorkerInfoList_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
