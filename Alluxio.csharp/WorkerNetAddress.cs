/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


/// <summary>
/// Address information about workers.
/// </summary>
#if !SILVERLIGHT
[Serializable]
#endif
public partial class WorkerNetAddress : TBase
{
  private string _host;
  private int _rpcPort;
  private int _dataPort;
  private int _webPort;

  public string Host
  {
    get
    {
      return _host;
    }
    set
    {
      __isset.host = true;
      this._host = value;
    }
  }

  public int RpcPort
  {
    get
    {
      return _rpcPort;
    }
    set
    {
      __isset.rpcPort = true;
      this._rpcPort = value;
    }
  }

  public int DataPort
  {
    get
    {
      return _dataPort;
    }
    set
    {
      __isset.dataPort = true;
      this._dataPort = value;
    }
  }

  public int WebPort
  {
    get
    {
      return _webPort;
    }
    set
    {
      __isset.webPort = true;
      this._webPort = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool host;
    public bool rpcPort;
    public bool dataPort;
    public bool webPort;
  }

  public WorkerNetAddress() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Host = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              RpcPort = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              DataPort = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              WebPort = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("WorkerNetAddress");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Host != null && __isset.host) {
        field.Name = "host";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Host);
        oprot.WriteFieldEnd();
      }
      if (__isset.rpcPort) {
        field.Name = "rpcPort";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RpcPort);
        oprot.WriteFieldEnd();
      }
      if (__isset.dataPort) {
        field.Name = "dataPort";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DataPort);
        oprot.WriteFieldEnd();
      }
      if (__isset.webPort) {
        field.Name = "webPort";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(WebPort);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("WorkerNetAddress(");
    bool __first = true;
    if (Host != null && __isset.host) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Host: ");
      __sb.Append(Host);
    }
    if (__isset.rpcPort) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RpcPort: ");
      __sb.Append(RpcPort);
    }
    if (__isset.dataPort) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DataPort: ");
      __sb.Append(DataPort);
    }
    if (__isset.webPort) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("WebPort: ");
      __sb.Append(WebPort);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

