/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class FileSystemWorkerClientService {
  /// <summary>
  /// This interface contains file system worker service endpoints for Alluxio clients.
  /// </summary>
  public interface Iface : AlluxioService.Iface {
    /// <summary>
    /// Cancels a file which has not been completed in the under file system.
    /// </summary>
    /// <param name="sessionId">the id of the current session</param>
    /// <param name="tempUfsFileId">the worker specific file id of the ufs file</param>
    /// <param name="options">the options for canceling the file</param>
    void cancelUfsFile(long sessionId, long tempUfsFileId, CancelUfsFileTOptions options);
    #if SILVERLIGHT
    IAsyncResult Begin_cancelUfsFile(AsyncCallback callback, object state, long sessionId, long tempUfsFileId, CancelUfsFileTOptions options);
    void End_cancelUfsFile(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Closes a file in the under file system which was previously opened for reading.
    /// 
    /// </summary>
    /// <param name="sessionId">the id of the current session</param>
    /// <param name="tempUfsFileId">the worker specific file id of the ufs file</param>
    /// <param name="options">the options for closing the file</param>
    void closeUfsFile(long sessionId, long tempUfsFileId, CloseUfsFileTOptions options);
    #if SILVERLIGHT
    IAsyncResult Begin_closeUfsFile(AsyncCallback callback, object state, long sessionId, long tempUfsFileId, CloseUfsFileTOptions options);
    void End_closeUfsFile(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Completes a file in the under file system.
    /// </summary>
    /// <param name="sessionId">the id of the current session</param>
    /// <param name="tempUfsFileId">the worker specific file id of the ufs file</param>
    /// <param name="options">the options for completing the file</param>
    long completeUfsFile(long sessionId, long tempUfsFileId, CompleteUfsFileTOptions options);
    #if SILVERLIGHT
    IAsyncResult Begin_completeUfsFile(AsyncCallback callback, object state, long sessionId, long tempUfsFileId, CompleteUfsFileTOptions options);
    long End_completeUfsFile(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Creates a file in the under file system.
    /// </summary>
    /// <param name="sessionId">the id of the current session</param>
    /// <param name="ufsPath">the path of the file in the ufs</param>
    /// <param name="options">the options for creating the file</param>
    long createUfsFile(long sessionId, string ufsPath, CreateUfsFileTOptions options);
    #if SILVERLIGHT
    IAsyncResult Begin_createUfsFile(AsyncCallback callback, object state, long sessionId, string ufsPath, CreateUfsFileTOptions options);
    long End_createUfsFile(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Opens an existing file in the under file system for reading.
    /// </summary>
    /// <param name="sessionId">the id of the current session</param>
    /// <param name="ufsPath">the path of the file in the ufs</param>
    /// <param name="options">the options for opening the file</param>
    long openUfsFile(long sessionId, string ufsPath, OpenUfsFileTOptions options);
    #if SILVERLIGHT
    IAsyncResult Begin_openUfsFile(AsyncCallback callback, object state, long sessionId, string ufsPath, OpenUfsFileTOptions options);
    long End_openUfsFile(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Local session send heartbeat to local worker to keep its state. It also can be used to send
    /// client metrics to the worker.
    /// </summary>
    /// <param name="sessionId">the id of the current session</param>
    /// <param name="metrics">the client metrics</param>
    void sessionHeartbeat(long sessionId, List<long> metrics);
    #if SILVERLIGHT
    IAsyncResult Begin_sessionHeartbeat(AsyncCallback callback, object state, long sessionId, List<long> metrics);
    void End_sessionHeartbeat(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// This interface contains file system worker service endpoints for Alluxio clients.
  /// </summary>
  public class Client : AlluxioService.Client, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
    {
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_cancelUfsFile(AsyncCallback callback, object state, long sessionId, long tempUfsFileId, CancelUfsFileTOptions options)
    {
      return send_cancelUfsFile(callback, state, sessionId, tempUfsFileId, options);
    }

    public void End_cancelUfsFile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_cancelUfsFile();
    }

    #endif

    /// <summary>
    /// Cancels a file which has not been completed in the under file system.
    /// </summary>
    /// <param name="sessionId">the id of the current session</param>
    /// <param name="tempUfsFileId">the worker specific file id of the ufs file</param>
    /// <param name="options">the options for canceling the file</param>
    public void cancelUfsFile(long sessionId, long tempUfsFileId, CancelUfsFileTOptions options)
    {
      #if !SILVERLIGHT
      send_cancelUfsFile(sessionId, tempUfsFileId, options);
      recv_cancelUfsFile();

      #else
      var asyncResult = Begin_cancelUfsFile(null, null, sessionId, tempUfsFileId, options);
      End_cancelUfsFile(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_cancelUfsFile(AsyncCallback callback, object state, long sessionId, long tempUfsFileId, CancelUfsFileTOptions options)
    #else
    public void send_cancelUfsFile(long sessionId, long tempUfsFileId, CancelUfsFileTOptions options)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("cancelUfsFile", TMessageType.Call, seqid_));
      cancelUfsFile_args args = new cancelUfsFile_args();
      args.SessionId = sessionId;
      args.TempUfsFileId = tempUfsFileId;
      args.Options = options;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_cancelUfsFile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      cancelUfsFile_result result = new cancelUfsFile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.ioe) {
        throw result.Ioe;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_closeUfsFile(AsyncCallback callback, object state, long sessionId, long tempUfsFileId, CloseUfsFileTOptions options)
    {
      return send_closeUfsFile(callback, state, sessionId, tempUfsFileId, options);
    }

    public void End_closeUfsFile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_closeUfsFile();
    }

    #endif

    /// <summary>
    /// Closes a file in the under file system which was previously opened for reading.
    /// 
    /// </summary>
    /// <param name="sessionId">the id of the current session</param>
    /// <param name="tempUfsFileId">the worker specific file id of the ufs file</param>
    /// <param name="options">the options for closing the file</param>
    public void closeUfsFile(long sessionId, long tempUfsFileId, CloseUfsFileTOptions options)
    {
      #if !SILVERLIGHT
      send_closeUfsFile(sessionId, tempUfsFileId, options);
      recv_closeUfsFile();

      #else
      var asyncResult = Begin_closeUfsFile(null, null, sessionId, tempUfsFileId, options);
      End_closeUfsFile(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_closeUfsFile(AsyncCallback callback, object state, long sessionId, long tempUfsFileId, CloseUfsFileTOptions options)
    #else
    public void send_closeUfsFile(long sessionId, long tempUfsFileId, CloseUfsFileTOptions options)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("closeUfsFile", TMessageType.Call, seqid_));
      closeUfsFile_args args = new closeUfsFile_args();
      args.SessionId = sessionId;
      args.TempUfsFileId = tempUfsFileId;
      args.Options = options;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_closeUfsFile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      closeUfsFile_result result = new closeUfsFile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.ioe) {
        throw result.Ioe;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_completeUfsFile(AsyncCallback callback, object state, long sessionId, long tempUfsFileId, CompleteUfsFileTOptions options)
    {
      return send_completeUfsFile(callback, state, sessionId, tempUfsFileId, options);
    }

    public long End_completeUfsFile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_completeUfsFile();
    }

    #endif

    /// <summary>
    /// Completes a file in the under file system.
    /// </summary>
    /// <param name="sessionId">the id of the current session</param>
    /// <param name="tempUfsFileId">the worker specific file id of the ufs file</param>
    /// <param name="options">the options for completing the file</param>
    public long completeUfsFile(long sessionId, long tempUfsFileId, CompleteUfsFileTOptions options)
    {
      #if !SILVERLIGHT
      send_completeUfsFile(sessionId, tempUfsFileId, options);
      return recv_completeUfsFile();

      #else
      var asyncResult = Begin_completeUfsFile(null, null, sessionId, tempUfsFileId, options);
      return End_completeUfsFile(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_completeUfsFile(AsyncCallback callback, object state, long sessionId, long tempUfsFileId, CompleteUfsFileTOptions options)
    #else
    public void send_completeUfsFile(long sessionId, long tempUfsFileId, CompleteUfsFileTOptions options)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("completeUfsFile", TMessageType.Call, seqid_));
      completeUfsFile_args args = new completeUfsFile_args();
      args.SessionId = sessionId;
      args.TempUfsFileId = tempUfsFileId;
      args.Options = options;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_completeUfsFile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      completeUfsFile_result result = new completeUfsFile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.ioe) {
        throw result.Ioe;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "completeUfsFile failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_createUfsFile(AsyncCallback callback, object state, long sessionId, string ufsPath, CreateUfsFileTOptions options)
    {
      return send_createUfsFile(callback, state, sessionId, ufsPath, options);
    }

    public long End_createUfsFile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createUfsFile();
    }

    #endif

    /// <summary>
    /// Creates a file in the under file system.
    /// </summary>
    /// <param name="sessionId">the id of the current session</param>
    /// <param name="ufsPath">the path of the file in the ufs</param>
    /// <param name="options">the options for creating the file</param>
    public long createUfsFile(long sessionId, string ufsPath, CreateUfsFileTOptions options)
    {
      #if !SILVERLIGHT
      send_createUfsFile(sessionId, ufsPath, options);
      return recv_createUfsFile();

      #else
      var asyncResult = Begin_createUfsFile(null, null, sessionId, ufsPath, options);
      return End_createUfsFile(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createUfsFile(AsyncCallback callback, object state, long sessionId, string ufsPath, CreateUfsFileTOptions options)
    #else
    public void send_createUfsFile(long sessionId, string ufsPath, CreateUfsFileTOptions options)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("createUfsFile", TMessageType.Call, seqid_));
      createUfsFile_args args = new createUfsFile_args();
      args.SessionId = sessionId;
      args.UfsPath = ufsPath;
      args.Options = options;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_createUfsFile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createUfsFile_result result = new createUfsFile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.ioe) {
        throw result.Ioe;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createUfsFile failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_openUfsFile(AsyncCallback callback, object state, long sessionId, string ufsPath, OpenUfsFileTOptions options)
    {
      return send_openUfsFile(callback, state, sessionId, ufsPath, options);
    }

    public long End_openUfsFile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_openUfsFile();
    }

    #endif

    /// <summary>
    /// Opens an existing file in the under file system for reading.
    /// </summary>
    /// <param name="sessionId">the id of the current session</param>
    /// <param name="ufsPath">the path of the file in the ufs</param>
    /// <param name="options">the options for opening the file</param>
    public long openUfsFile(long sessionId, string ufsPath, OpenUfsFileTOptions options)
    {
      #if !SILVERLIGHT
      send_openUfsFile(sessionId, ufsPath, options);
      return recv_openUfsFile();

      #else
      var asyncResult = Begin_openUfsFile(null, null, sessionId, ufsPath, options);
      return End_openUfsFile(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_openUfsFile(AsyncCallback callback, object state, long sessionId, string ufsPath, OpenUfsFileTOptions options)
    #else
    public void send_openUfsFile(long sessionId, string ufsPath, OpenUfsFileTOptions options)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("openUfsFile", TMessageType.Call, seqid_));
      openUfsFile_args args = new openUfsFile_args();
      args.SessionId = sessionId;
      args.UfsPath = ufsPath;
      args.Options = options;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_openUfsFile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      openUfsFile_result result = new openUfsFile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.ioe) {
        throw result.Ioe;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "openUfsFile failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_sessionHeartbeat(AsyncCallback callback, object state, long sessionId, List<long> metrics)
    {
      return send_sessionHeartbeat(callback, state, sessionId, metrics);
    }

    public void End_sessionHeartbeat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_sessionHeartbeat();
    }

    #endif

    /// <summary>
    /// Local session send heartbeat to local worker to keep its state. It also can be used to send
    /// client metrics to the worker.
    /// </summary>
    /// <param name="sessionId">the id of the current session</param>
    /// <param name="metrics">the client metrics</param>
    public void sessionHeartbeat(long sessionId, List<long> metrics)
    {
      #if !SILVERLIGHT
      send_sessionHeartbeat(sessionId, metrics);
      recv_sessionHeartbeat();

      #else
      var asyncResult = Begin_sessionHeartbeat(null, null, sessionId, metrics);
      End_sessionHeartbeat(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sessionHeartbeat(AsyncCallback callback, object state, long sessionId, List<long> metrics)
    #else
    public void send_sessionHeartbeat(long sessionId, List<long> metrics)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("sessionHeartbeat", TMessageType.Call, seqid_));
      sessionHeartbeat_args args = new sessionHeartbeat_args();
      args.SessionId = sessionId;
      args.Metrics = metrics;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_sessionHeartbeat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sessionHeartbeat_result result = new sessionHeartbeat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

  }
  public class Processor : AlluxioService.Processor, TProcessor {
    public Processor(Iface iface) : base(iface)
    {
      iface_ = iface;
      processMap_["cancelUfsFile"] = cancelUfsFile_Process;
      processMap_["closeUfsFile"] = closeUfsFile_Process;
      processMap_["completeUfsFile"] = completeUfsFile_Process;
      processMap_["createUfsFile"] = createUfsFile_Process;
      processMap_["openUfsFile"] = openUfsFile_Process;
      processMap_["sessionHeartbeat"] = sessionHeartbeat_Process;
    }

    private Iface iface_;

    public new bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void cancelUfsFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      cancelUfsFile_args args = new cancelUfsFile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      cancelUfsFile_result result = new cancelUfsFile_result();
      try {
        iface_.cancelUfsFile(args.SessionId, args.TempUfsFileId, args.Options);
      } catch (AlluxioTException e) {
        result.E = e;
      } catch (ThriftIOException ioe) {
        result.Ioe = ioe;
      }
      oprot.WriteMessageBegin(new TMessage("cancelUfsFile", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void closeUfsFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      closeUfsFile_args args = new closeUfsFile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      closeUfsFile_result result = new closeUfsFile_result();
      try {
        iface_.closeUfsFile(args.SessionId, args.TempUfsFileId, args.Options);
      } catch (AlluxioTException e) {
        result.E = e;
      } catch (ThriftIOException ioe) {
        result.Ioe = ioe;
      }
      oprot.WriteMessageBegin(new TMessage("closeUfsFile", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void completeUfsFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      completeUfsFile_args args = new completeUfsFile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      completeUfsFile_result result = new completeUfsFile_result();
      try {
        result.Success = iface_.completeUfsFile(args.SessionId, args.TempUfsFileId, args.Options);
      } catch (AlluxioTException e) {
        result.E = e;
      } catch (ThriftIOException ioe) {
        result.Ioe = ioe;
      }
      oprot.WriteMessageBegin(new TMessage("completeUfsFile", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createUfsFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createUfsFile_args args = new createUfsFile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createUfsFile_result result = new createUfsFile_result();
      try {
        result.Success = iface_.createUfsFile(args.SessionId, args.UfsPath, args.Options);
      } catch (AlluxioTException e) {
        result.E = e;
      } catch (ThriftIOException ioe) {
        result.Ioe = ioe;
      }
      oprot.WriteMessageBegin(new TMessage("createUfsFile", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void openUfsFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      openUfsFile_args args = new openUfsFile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      openUfsFile_result result = new openUfsFile_result();
      try {
        result.Success = iface_.openUfsFile(args.SessionId, args.UfsPath, args.Options);
      } catch (AlluxioTException e) {
        result.E = e;
      } catch (ThriftIOException ioe) {
        result.Ioe = ioe;
      }
      oprot.WriteMessageBegin(new TMessage("openUfsFile", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sessionHeartbeat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sessionHeartbeat_args args = new sessionHeartbeat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sessionHeartbeat_result result = new sessionHeartbeat_result();
      iface_.sessionHeartbeat(args.SessionId, args.Metrics);
      oprot.WriteMessageBegin(new TMessage("sessionHeartbeat", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cancelUfsFile_args : TBase
  {
    private long _sessionId;
    private long _tempUfsFileId;
    private CancelUfsFileTOptions _options;

    /// <summary>
    /// the id of the current session
    /// </summary>
    public long SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    /// <summary>
    /// the worker specific file id of the ufs file
    /// </summary>
    public long TempUfsFileId
    {
      get
      {
        return _tempUfsFileId;
      }
      set
      {
        __isset.tempUfsFileId = true;
        this._tempUfsFileId = value;
      }
    }

    /// <summary>
    /// the options for canceling the file
    /// </summary>
    public CancelUfsFileTOptions Options
    {
      get
      {
        return _options;
      }
      set
      {
        __isset.options = true;
        this._options = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool tempUfsFileId;
      public bool options;
    }

    public cancelUfsFile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                SessionId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                TempUfsFileId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Options = new CancelUfsFileTOptions();
                Options.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("cancelUfsFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SessionId);
          oprot.WriteFieldEnd();
        }
        if (__isset.tempUfsFileId) {
          field.Name = "tempUfsFileId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TempUfsFileId);
          oprot.WriteFieldEnd();
        }
        if (Options != null && __isset.options) {
          field.Name = "options";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Options.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cancelUfsFile_args(");
      bool __first = true;
      if (__isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (__isset.tempUfsFileId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TempUfsFileId: ");
        __sb.Append(TempUfsFileId);
      }
      if (Options != null && __isset.options) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Options: ");
        __sb.Append(Options== null ? "<null>" : Options.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cancelUfsFile_result : TBase
  {
    private AlluxioTException _e;
    private ThriftIOException _ioe;

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public ThriftIOException Ioe
    {
      get
      {
        return _ioe;
      }
      set
      {
        __isset.ioe = true;
        this._ioe = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
      public bool ioe;
    }

    public cancelUfsFile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ioe = new ThriftIOException();
                Ioe.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("cancelUfsFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ioe) {
          if (Ioe != null) {
            field.Name = "Ioe";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Ioe.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cancelUfsFile_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Ioe != null && __isset.ioe) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ioe: ");
        __sb.Append(Ioe== null ? "<null>" : Ioe.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class closeUfsFile_args : TBase
  {
    private long _sessionId;
    private long _tempUfsFileId;
    private CloseUfsFileTOptions _options;

    /// <summary>
    /// the id of the current session
    /// </summary>
    public long SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    /// <summary>
    /// the worker specific file id of the ufs file
    /// </summary>
    public long TempUfsFileId
    {
      get
      {
        return _tempUfsFileId;
      }
      set
      {
        __isset.tempUfsFileId = true;
        this._tempUfsFileId = value;
      }
    }

    /// <summary>
    /// the options for closing the file
    /// </summary>
    public CloseUfsFileTOptions Options
    {
      get
      {
        return _options;
      }
      set
      {
        __isset.options = true;
        this._options = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool tempUfsFileId;
      public bool options;
    }

    public closeUfsFile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                SessionId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                TempUfsFileId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Options = new CloseUfsFileTOptions();
                Options.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("closeUfsFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SessionId);
          oprot.WriteFieldEnd();
        }
        if (__isset.tempUfsFileId) {
          field.Name = "tempUfsFileId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TempUfsFileId);
          oprot.WriteFieldEnd();
        }
        if (Options != null && __isset.options) {
          field.Name = "options";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Options.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("closeUfsFile_args(");
      bool __first = true;
      if (__isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (__isset.tempUfsFileId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TempUfsFileId: ");
        __sb.Append(TempUfsFileId);
      }
      if (Options != null && __isset.options) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Options: ");
        __sb.Append(Options== null ? "<null>" : Options.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class closeUfsFile_result : TBase
  {
    private AlluxioTException _e;
    private ThriftIOException _ioe;

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public ThriftIOException Ioe
    {
      get
      {
        return _ioe;
      }
      set
      {
        __isset.ioe = true;
        this._ioe = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
      public bool ioe;
    }

    public closeUfsFile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ioe = new ThriftIOException();
                Ioe.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("closeUfsFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ioe) {
          if (Ioe != null) {
            field.Name = "Ioe";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Ioe.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("closeUfsFile_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Ioe != null && __isset.ioe) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ioe: ");
        __sb.Append(Ioe== null ? "<null>" : Ioe.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class completeUfsFile_args : TBase
  {
    private long _sessionId;
    private long _tempUfsFileId;
    private CompleteUfsFileTOptions _options;

    /// <summary>
    /// the id of the current session
    /// </summary>
    public long SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    /// <summary>
    /// the worker specific file id of the ufs file
    /// </summary>
    public long TempUfsFileId
    {
      get
      {
        return _tempUfsFileId;
      }
      set
      {
        __isset.tempUfsFileId = true;
        this._tempUfsFileId = value;
      }
    }

    /// <summary>
    /// the options for completing the file
    /// </summary>
    public CompleteUfsFileTOptions Options
    {
      get
      {
        return _options;
      }
      set
      {
        __isset.options = true;
        this._options = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool tempUfsFileId;
      public bool options;
    }

    public completeUfsFile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                SessionId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                TempUfsFileId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Options = new CompleteUfsFileTOptions();
                Options.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("completeUfsFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SessionId);
          oprot.WriteFieldEnd();
        }
        if (__isset.tempUfsFileId) {
          field.Name = "tempUfsFileId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TempUfsFileId);
          oprot.WriteFieldEnd();
        }
        if (Options != null && __isset.options) {
          field.Name = "options";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Options.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("completeUfsFile_args(");
      bool __first = true;
      if (__isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (__isset.tempUfsFileId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TempUfsFileId: ");
        __sb.Append(TempUfsFileId);
      }
      if (Options != null && __isset.options) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Options: ");
        __sb.Append(Options== null ? "<null>" : Options.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class completeUfsFile_result : TBase
  {
    private long _success;
    private AlluxioTException _e;
    private ThriftIOException _ioe;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public ThriftIOException Ioe
    {
      get
      {
        return _ioe;
      }
      set
      {
        __isset.ioe = true;
        this._ioe = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
      public bool ioe;
    }

    public completeUfsFile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ioe = new ThriftIOException();
                Ioe.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("completeUfsFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ioe) {
          if (Ioe != null) {
            field.Name = "Ioe";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Ioe.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("completeUfsFile_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Ioe != null && __isset.ioe) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ioe: ");
        __sb.Append(Ioe== null ? "<null>" : Ioe.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createUfsFile_args : TBase
  {
    private long _sessionId;
    private string _ufsPath;
    private CreateUfsFileTOptions _options;

    /// <summary>
    /// the id of the current session
    /// </summary>
    public long SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    /// <summary>
    /// the path of the file in the ufs
    /// </summary>
    public string UfsPath
    {
      get
      {
        return _ufsPath;
      }
      set
      {
        __isset.ufsPath = true;
        this._ufsPath = value;
      }
    }

    /// <summary>
    /// the options for creating the file
    /// </summary>
    public CreateUfsFileTOptions Options
    {
      get
      {
        return _options;
      }
      set
      {
        __isset.options = true;
        this._options = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool ufsPath;
      public bool options;
    }

    public createUfsFile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                SessionId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UfsPath = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Options = new CreateUfsFileTOptions();
                Options.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createUfsFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SessionId);
          oprot.WriteFieldEnd();
        }
        if (UfsPath != null && __isset.ufsPath) {
          field.Name = "ufsPath";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UfsPath);
          oprot.WriteFieldEnd();
        }
        if (Options != null && __isset.options) {
          field.Name = "options";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Options.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createUfsFile_args(");
      bool __first = true;
      if (__isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (UfsPath != null && __isset.ufsPath) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UfsPath: ");
        __sb.Append(UfsPath);
      }
      if (Options != null && __isset.options) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Options: ");
        __sb.Append(Options== null ? "<null>" : Options.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createUfsFile_result : TBase
  {
    private long _success;
    private AlluxioTException _e;
    private ThriftIOException _ioe;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public ThriftIOException Ioe
    {
      get
      {
        return _ioe;
      }
      set
      {
        __isset.ioe = true;
        this._ioe = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
      public bool ioe;
    }

    public createUfsFile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ioe = new ThriftIOException();
                Ioe.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createUfsFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ioe) {
          if (Ioe != null) {
            field.Name = "Ioe";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Ioe.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createUfsFile_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Ioe != null && __isset.ioe) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ioe: ");
        __sb.Append(Ioe== null ? "<null>" : Ioe.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class openUfsFile_args : TBase
  {
    private long _sessionId;
    private string _ufsPath;
    private OpenUfsFileTOptions _options;

    /// <summary>
    /// the id of the current session
    /// </summary>
    public long SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    /// <summary>
    /// the path of the file in the ufs
    /// </summary>
    public string UfsPath
    {
      get
      {
        return _ufsPath;
      }
      set
      {
        __isset.ufsPath = true;
        this._ufsPath = value;
      }
    }

    /// <summary>
    /// the options for opening the file
    /// </summary>
    public OpenUfsFileTOptions Options
    {
      get
      {
        return _options;
      }
      set
      {
        __isset.options = true;
        this._options = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool ufsPath;
      public bool options;
    }

    public openUfsFile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                SessionId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UfsPath = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Options = new OpenUfsFileTOptions();
                Options.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("openUfsFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SessionId);
          oprot.WriteFieldEnd();
        }
        if (UfsPath != null && __isset.ufsPath) {
          field.Name = "ufsPath";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UfsPath);
          oprot.WriteFieldEnd();
        }
        if (Options != null && __isset.options) {
          field.Name = "options";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Options.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("openUfsFile_args(");
      bool __first = true;
      if (__isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (UfsPath != null && __isset.ufsPath) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UfsPath: ");
        __sb.Append(UfsPath);
      }
      if (Options != null && __isset.options) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Options: ");
        __sb.Append(Options== null ? "<null>" : Options.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class openUfsFile_result : TBase
  {
    private long _success;
    private AlluxioTException _e;
    private ThriftIOException _ioe;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public ThriftIOException Ioe
    {
      get
      {
        return _ioe;
      }
      set
      {
        __isset.ioe = true;
        this._ioe = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
      public bool ioe;
    }

    public openUfsFile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ioe = new ThriftIOException();
                Ioe.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("openUfsFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ioe) {
          if (Ioe != null) {
            field.Name = "Ioe";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Ioe.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("openUfsFile_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Ioe != null && __isset.ioe) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ioe: ");
        __sb.Append(Ioe== null ? "<null>" : Ioe.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sessionHeartbeat_args : TBase
  {
    private long _sessionId;
    private List<long> _metrics;

    /// <summary>
    /// the id of the current session
    /// </summary>
    public long SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    /// <summary>
    /// the client metrics
    /// </summary>
    public List<long> Metrics
    {
      get
      {
        return _metrics;
      }
      set
      {
        __isset.metrics = true;
        this._metrics = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool metrics;
    }

    public sessionHeartbeat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                SessionId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Metrics = new List<long>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    long _elem2;
                    _elem2 = iprot.ReadI64();
                    Metrics.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sessionHeartbeat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SessionId);
          oprot.WriteFieldEnd();
        }
        if (Metrics != null && __isset.metrics) {
          field.Name = "metrics";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I64, Metrics.Count));
            foreach (long _iter3 in Metrics)
            {
              oprot.WriteI64(_iter3);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sessionHeartbeat_args(");
      bool __first = true;
      if (__isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (Metrics != null && __isset.metrics) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Metrics: ");
        __sb.Append(Metrics);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sessionHeartbeat_result : TBase
  {

    public sessionHeartbeat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sessionHeartbeat_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sessionHeartbeat_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
