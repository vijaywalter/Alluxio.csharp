/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class WorkerInfo : TBase
{
  private long _id;
  private WorkerNetAddress _address;
  private int _lastContactSec;
  private string _state;
  private long _capacityBytes;
  private long _usedBytes;
  private long _startTimeMs;

  public long Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public WorkerNetAddress Address
  {
    get
    {
      return _address;
    }
    set
    {
      __isset.address = true;
      this._address = value;
    }
  }

  public int LastContactSec
  {
    get
    {
      return _lastContactSec;
    }
    set
    {
      __isset.lastContactSec = true;
      this._lastContactSec = value;
    }
  }

  public string State
  {
    get
    {
      return _state;
    }
    set
    {
      __isset.state = true;
      this._state = value;
    }
  }

  public long CapacityBytes
  {
    get
    {
      return _capacityBytes;
    }
    set
    {
      __isset.capacityBytes = true;
      this._capacityBytes = value;
    }
  }

  public long UsedBytes
  {
    get
    {
      return _usedBytes;
    }
    set
    {
      __isset.usedBytes = true;
      this._usedBytes = value;
    }
  }

  public long StartTimeMs
  {
    get
    {
      return _startTimeMs;
    }
    set
    {
      __isset.startTimeMs = true;
      this._startTimeMs = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool address;
    public bool lastContactSec;
    public bool state;
    public bool capacityBytes;
    public bool usedBytes;
    public bool startTimeMs;
  }

  public WorkerInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Id = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Address = new WorkerNetAddress();
              Address.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              LastContactSec = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              State = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              CapacityBytes = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              UsedBytes = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              StartTimeMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("WorkerInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
      }
      if (Address != null && __isset.address) {
        field.Name = "address";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Address.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastContactSec) {
        field.Name = "lastContactSec";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LastContactSec);
        oprot.WriteFieldEnd();
      }
      if (State != null && __isset.state) {
        field.Name = "state";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(State);
        oprot.WriteFieldEnd();
      }
      if (__isset.capacityBytes) {
        field.Name = "capacityBytes";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CapacityBytes);
        oprot.WriteFieldEnd();
      }
      if (__isset.usedBytes) {
        field.Name = "usedBytes";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UsedBytes);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTimeMs) {
        field.Name = "startTimeMs";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTimeMs);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("WorkerInfo(");
    bool __first = true;
    if (__isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (Address != null && __isset.address) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Address: ");
      __sb.Append(Address== null ? "<null>" : Address.ToString());
    }
    if (__isset.lastContactSec) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LastContactSec: ");
      __sb.Append(LastContactSec);
    }
    if (State != null && __isset.state) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("State: ");
      __sb.Append(State);
    }
    if (__isset.capacityBytes) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CapacityBytes: ");
      __sb.Append(CapacityBytes);
    }
    if (__isset.usedBytes) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UsedBytes: ");
      __sb.Append(UsedBytes);
    }
    if (__isset.startTimeMs) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StartTimeMs: ");
      __sb.Append(StartTimeMs);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

