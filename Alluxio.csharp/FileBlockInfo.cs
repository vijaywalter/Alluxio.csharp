/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


/// <summary>
/// Contains the information of a block in a file. In addition to the BlockInfo, it includes the
/// offset in the file, and the under file system locations of the block replicas.
/// </summary>
#if !SILVERLIGHT
[Serializable]
#endif
public partial class FileBlockInfo : TBase
{
  private BlockInfo _blockInfo;
  private long _offset;
  private List<WorkerNetAddress> _ufsLocations;
  private List<string> _ufsStringLocations;

  public BlockInfo BlockInfo
  {
    get
    {
      return _blockInfo;
    }
    set
    {
      __isset.blockInfo = true;
      this._blockInfo = value;
    }
  }

  public long Offset
  {
    get
    {
      return _offset;
    }
    set
    {
      __isset.offset = true;
      this._offset = value;
    }
  }

  public List<WorkerNetAddress> UfsLocations
  {
    get
    {
      return _ufsLocations;
    }
    set
    {
      __isset.ufsLocations = true;
      this._ufsLocations = value;
    }
  }

  public List<string> UfsStringLocations
  {
    get
    {
      return _ufsStringLocations;
    }
    set
    {
      __isset.ufsStringLocations = true;
      this._ufsStringLocations = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool blockInfo;
    public bool offset;
    public bool ufsLocations;
    public bool ufsStringLocations;
  }

  public FileBlockInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              BlockInfo = new BlockInfo();
              BlockInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Offset = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                UfsLocations = new List<WorkerNetAddress>();
                TList _list5 = iprot.ReadListBegin();
                for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                {
                  WorkerNetAddress _elem7;
                  _elem7 = new WorkerNetAddress();
                  _elem7.Read(iprot);
                  UfsLocations.Add(_elem7);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                UfsStringLocations = new List<string>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  string _elem10;
                  _elem10 = iprot.ReadString();
                  UfsStringLocations.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("FileBlockInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BlockInfo != null && __isset.blockInfo) {
        field.Name = "blockInfo";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        BlockInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.offset) {
        field.Name = "offset";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Offset);
        oprot.WriteFieldEnd();
      }
      if (UfsLocations != null && __isset.ufsLocations) {
        field.Name = "ufsLocations";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, UfsLocations.Count));
          foreach (WorkerNetAddress _iter11 in UfsLocations)
          {
            _iter11.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (UfsStringLocations != null && __isset.ufsStringLocations) {
        field.Name = "ufsStringLocations";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, UfsStringLocations.Count));
          foreach (string _iter12 in UfsStringLocations)
          {
            oprot.WriteString(_iter12);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("FileBlockInfo(");
    bool __first = true;
    if (BlockInfo != null && __isset.blockInfo) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("BlockInfo: ");
      __sb.Append(BlockInfo== null ? "<null>" : BlockInfo.ToString());
    }
    if (__isset.offset) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Offset: ");
      __sb.Append(Offset);
    }
    if (UfsLocations != null && __isset.ufsLocations) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UfsLocations: ");
      __sb.Append(UfsLocations);
    }
    if (UfsStringLocations != null && __isset.ufsStringLocations) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UfsStringLocations: ");
      __sb.Append(UfsStringLocations);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

