/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class LineageMasterClientService {
  /// <summary>
  /// This interface contains lineage master service endpoints for Alluxio clients.
  /// </summary>
  public interface Iface : AlluxioService.Iface {
    /// <summary>
    /// Creates a lineage and returns the lineage id.
    /// </summary>
    /// <param name="inputFiles">the list of input files</param>
    /// <param name="outputFiles">the list of output files</param>
    /// <param name="job">the command line job info</param>
    long createLineage(List<string> inputFiles, List<string> outputFiles, CommandLineJobInfo job);
    #if SILVERLIGHT
    IAsyncResult Begin_createLineage(AsyncCallback callback, object state, List<string> inputFiles, List<string> outputFiles, CommandLineJobInfo job);
    long End_createLineage(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Deletes a lineage and returns whether the deletion succeeded.
    /// </summary>
    /// <param name="lineageId">the lineage id</param>
    /// <param name="cascade">whether to delete the lineage in cascade</param>
    bool deleteLineage(long lineageId, bool cascade);
    #if SILVERLIGHT
    IAsyncResult Begin_deleteLineage(AsyncCallback callback, object state, long lineageId, bool cascade);
    bool End_deleteLineage(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns a list of existing lineages.
    /// </summary>
    List<LineageInfo> getLineageInfoList();
    #if SILVERLIGHT
    IAsyncResult Begin_getLineageInfoList(AsyncCallback callback, object state);
    List<LineageInfo> End_getLineageInfoList(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Reinitializes a file. Returns the id of the reinitialized file when the
    /// file is lost or not completed, -1 otherwise.
    /// </summary>
    /// <param name="path">the path of the file</param>
    /// <param name="blockSizeBytes">block size in bytes</param>
    /// <param name="ttl">time to live</param>
    long reinitializeFile(string path, long blockSizeBytes, long ttl);
    #if SILVERLIGHT
    IAsyncResult Begin_reinitializeFile(AsyncCallback callback, object state, string path, long blockSizeBytes, long ttl);
    long End_reinitializeFile(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Reports file as lost.
    /// </summary>
    /// <param name="path">the path of the file</param>
    void reportLostFile(string path);
    #if SILVERLIGHT
    IAsyncResult Begin_reportLostFile(AsyncCallback callback, object state, string path);
    void End_reportLostFile(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// This interface contains lineage master service endpoints for Alluxio clients.
  /// </summary>
  public class Client : AlluxioService.Client, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
    {
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_createLineage(AsyncCallback callback, object state, List<string> inputFiles, List<string> outputFiles, CommandLineJobInfo job)
    {
      return send_createLineage(callback, state, inputFiles, outputFiles, job);
    }

    public long End_createLineage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createLineage();
    }

    #endif

    /// <summary>
    /// Creates a lineage and returns the lineage id.
    /// </summary>
    /// <param name="inputFiles">the list of input files</param>
    /// <param name="outputFiles">the list of output files</param>
    /// <param name="job">the command line job info</param>
    public long createLineage(List<string> inputFiles, List<string> outputFiles, CommandLineJobInfo job)
    {
      #if !SILVERLIGHT
      send_createLineage(inputFiles, outputFiles, job);
      return recv_createLineage();

      #else
      var asyncResult = Begin_createLineage(null, null, inputFiles, outputFiles, job);
      return End_createLineage(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createLineage(AsyncCallback callback, object state, List<string> inputFiles, List<string> outputFiles, CommandLineJobInfo job)
    #else
    public void send_createLineage(List<string> inputFiles, List<string> outputFiles, CommandLineJobInfo job)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("createLineage", TMessageType.Call, seqid_));
      createLineage_args args = new createLineage_args();
      args.InputFiles = inputFiles;
      args.OutputFiles = outputFiles;
      args.Job = job;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_createLineage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createLineage_result result = new createLineage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      if (result.__isset.ioe) {
        throw result.Ioe;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createLineage failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteLineage(AsyncCallback callback, object state, long lineageId, bool cascade)
    {
      return send_deleteLineage(callback, state, lineageId, cascade);
    }

    public bool End_deleteLineage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteLineage();
    }

    #endif

    /// <summary>
    /// Deletes a lineage and returns whether the deletion succeeded.
    /// </summary>
    /// <param name="lineageId">the lineage id</param>
    /// <param name="cascade">whether to delete the lineage in cascade</param>
    public bool deleteLineage(long lineageId, bool cascade)
    {
      #if !SILVERLIGHT
      send_deleteLineage(lineageId, cascade);
      return recv_deleteLineage();

      #else
      var asyncResult = Begin_deleteLineage(null, null, lineageId, cascade);
      return End_deleteLineage(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteLineage(AsyncCallback callback, object state, long lineageId, bool cascade)
    #else
    public void send_deleteLineage(long lineageId, bool cascade)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteLineage", TMessageType.Call, seqid_));
      deleteLineage_args args = new deleteLineage_args();
      args.LineageId = lineageId;
      args.Cascade = cascade;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_deleteLineage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteLineage_result result = new deleteLineage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteLineage failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getLineageInfoList(AsyncCallback callback, object state)
    {
      return send_getLineageInfoList(callback, state);
    }

    public List<LineageInfo> End_getLineageInfoList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getLineageInfoList();
    }

    #endif

    /// <summary>
    /// Returns a list of existing lineages.
    /// </summary>
    public List<LineageInfo> getLineageInfoList()
    {
      #if !SILVERLIGHT
      send_getLineageInfoList();
      return recv_getLineageInfoList();

      #else
      var asyncResult = Begin_getLineageInfoList(null, null);
      return End_getLineageInfoList(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getLineageInfoList(AsyncCallback callback, object state)
    #else
    public void send_getLineageInfoList()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getLineageInfoList", TMessageType.Call, seqid_));
      getLineageInfoList_args args = new getLineageInfoList_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<LineageInfo> recv_getLineageInfoList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getLineageInfoList_result result = new getLineageInfoList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLineageInfoList failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_reinitializeFile(AsyncCallback callback, object state, string path, long blockSizeBytes, long ttl)
    {
      return send_reinitializeFile(callback, state, path, blockSizeBytes, ttl);
    }

    public long End_reinitializeFile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_reinitializeFile();
    }

    #endif

    /// <summary>
    /// Reinitializes a file. Returns the id of the reinitialized file when the
    /// file is lost or not completed, -1 otherwise.
    /// </summary>
    /// <param name="path">the path of the file</param>
    /// <param name="blockSizeBytes">block size in bytes</param>
    /// <param name="ttl">time to live</param>
    public long reinitializeFile(string path, long blockSizeBytes, long ttl)
    {
      #if !SILVERLIGHT
      send_reinitializeFile(path, blockSizeBytes, ttl);
      return recv_reinitializeFile();

      #else
      var asyncResult = Begin_reinitializeFile(null, null, path, blockSizeBytes, ttl);
      return End_reinitializeFile(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reinitializeFile(AsyncCallback callback, object state, string path, long blockSizeBytes, long ttl)
    #else
    public void send_reinitializeFile(string path, long blockSizeBytes, long ttl)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("reinitializeFile", TMessageType.Call, seqid_));
      reinitializeFile_args args = new reinitializeFile_args();
      args.Path = path;
      args.BlockSizeBytes = blockSizeBytes;
      args.Ttl = ttl;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_reinitializeFile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reinitializeFile_result result = new reinitializeFile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reinitializeFile failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_reportLostFile(AsyncCallback callback, object state, string path)
    {
      return send_reportLostFile(callback, state, path);
    }

    public void End_reportLostFile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_reportLostFile();
    }

    #endif

    /// <summary>
    /// Reports file as lost.
    /// </summary>
    /// <param name="path">the path of the file</param>
    public void reportLostFile(string path)
    {
      #if !SILVERLIGHT
      send_reportLostFile(path);
      recv_reportLostFile();

      #else
      var asyncResult = Begin_reportLostFile(null, null, path);
      End_reportLostFile(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reportLostFile(AsyncCallback callback, object state, string path)
    #else
    public void send_reportLostFile(string path)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("reportLostFile", TMessageType.Call, seqid_));
      reportLostFile_args args = new reportLostFile_args();
      args.Path = path;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_reportLostFile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reportLostFile_result result = new reportLostFile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

  }
  public class Processor : AlluxioService.Processor, TProcessor {
    public Processor(Iface iface) : base(iface)
    {
      iface_ = iface;
      processMap_["createLineage"] = createLineage_Process;
      processMap_["deleteLineage"] = deleteLineage_Process;
      processMap_["getLineageInfoList"] = getLineageInfoList_Process;
      processMap_["reinitializeFile"] = reinitializeFile_Process;
      processMap_["reportLostFile"] = reportLostFile_Process;
    }

    private Iface iface_;

    public new bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void createLineage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createLineage_args args = new createLineage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createLineage_result result = new createLineage_result();
      try {
        result.Success = iface_.createLineage(args.InputFiles, args.OutputFiles, args.Job);
      } catch (AlluxioTException e) {
        result.E = e;
      } catch (ThriftIOException ioe) {
        result.Ioe = ioe;
      }
      oprot.WriteMessageBegin(new TMessage("createLineage", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteLineage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteLineage_args args = new deleteLineage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteLineage_result result = new deleteLineage_result();
      try {
        result.Success = iface_.deleteLineage(args.LineageId, args.Cascade);
      } catch (AlluxioTException e) {
        result.E = e;
      }
      oprot.WriteMessageBegin(new TMessage("deleteLineage", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getLineageInfoList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getLineageInfoList_args args = new getLineageInfoList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getLineageInfoList_result result = new getLineageInfoList_result();
      result.Success = iface_.getLineageInfoList();
      oprot.WriteMessageBegin(new TMessage("getLineageInfoList", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reinitializeFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reinitializeFile_args args = new reinitializeFile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reinitializeFile_result result = new reinitializeFile_result();
      try {
        result.Success = iface_.reinitializeFile(args.Path, args.BlockSizeBytes, args.Ttl);
      } catch (AlluxioTException e) {
        result.E = e;
      }
      oprot.WriteMessageBegin(new TMessage("reinitializeFile", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reportLostFile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reportLostFile_args args = new reportLostFile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reportLostFile_result result = new reportLostFile_result();
      try {
        iface_.reportLostFile(args.Path);
      } catch (AlluxioTException e) {
        result.E = e;
      }
      oprot.WriteMessageBegin(new TMessage("reportLostFile", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createLineage_args : TBase
  {
    private List<string> _inputFiles;
    private List<string> _outputFiles;
    private CommandLineJobInfo _job;

    /// <summary>
    /// the list of input files
    /// </summary>
    public List<string> InputFiles
    {
      get
      {
        return _inputFiles;
      }
      set
      {
        __isset.inputFiles = true;
        this._inputFiles = value;
      }
    }

    /// <summary>
    /// the list of output files
    /// </summary>
    public List<string> OutputFiles
    {
      get
      {
        return _outputFiles;
      }
      set
      {
        __isset.outputFiles = true;
        this._outputFiles = value;
      }
    }

    /// <summary>
    /// the command line job info
    /// </summary>
    public CommandLineJobInfo Job
    {
      get
      {
        return _job;
      }
      set
      {
        __isset.job = true;
        this._job = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool inputFiles;
      public bool outputFiles;
      public bool job;
    }

    public createLineage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  InputFiles = new List<string>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    string _elem18;
                    _elem18 = iprot.ReadString();
                    InputFiles.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  OutputFiles = new List<string>();
                  TList _list19 = iprot.ReadListBegin();
                  for( int _i20 = 0; _i20 < _list19.Count; ++_i20)
                  {
                    string _elem21;
                    _elem21 = iprot.ReadString();
                    OutputFiles.Add(_elem21);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Job = new CommandLineJobInfo();
                Job.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createLineage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InputFiles != null && __isset.inputFiles) {
          field.Name = "inputFiles";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, InputFiles.Count));
            foreach (string _iter22 in InputFiles)
            {
              oprot.WriteString(_iter22);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (OutputFiles != null && __isset.outputFiles) {
          field.Name = "outputFiles";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, OutputFiles.Count));
            foreach (string _iter23 in OutputFiles)
            {
              oprot.WriteString(_iter23);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Job != null && __isset.job) {
          field.Name = "job";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Job.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createLineage_args(");
      bool __first = true;
      if (InputFiles != null && __isset.inputFiles) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InputFiles: ");
        __sb.Append(InputFiles);
      }
      if (OutputFiles != null && __isset.outputFiles) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OutputFiles: ");
        __sb.Append(OutputFiles);
      }
      if (Job != null && __isset.job) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Job: ");
        __sb.Append(Job== null ? "<null>" : Job.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createLineage_result : TBase
  {
    private long _success;
    private AlluxioTException _e;
    private ThriftIOException _ioe;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }

    public ThriftIOException Ioe
    {
      get
      {
        return _ioe;
      }
      set
      {
        __isset.ioe = true;
        this._ioe = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
      public bool ioe;
    }

    public createLineage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Ioe = new ThriftIOException();
                Ioe.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createLineage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ioe) {
          if (Ioe != null) {
            field.Name = "Ioe";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Ioe.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createLineage_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      if (Ioe != null && __isset.ioe) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ioe: ");
        __sb.Append(Ioe== null ? "<null>" : Ioe.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteLineage_args : TBase
  {
    private long _lineageId;
    private bool _cascade;

    /// <summary>
    /// the lineage id
    /// </summary>
    public long LineageId
    {
      get
      {
        return _lineageId;
      }
      set
      {
        __isset.lineageId = true;
        this._lineageId = value;
      }
    }

    /// <summary>
    /// whether to delete the lineage in cascade
    /// </summary>
    public bool Cascade
    {
      get
      {
        return _cascade;
      }
      set
      {
        __isset.cascade = true;
        this._cascade = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lineageId;
      public bool cascade;
    }

    public deleteLineage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LineageId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Cascade = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteLineage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lineageId) {
          field.Name = "lineageId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LineageId);
          oprot.WriteFieldEnd();
        }
        if (__isset.cascade) {
          field.Name = "cascade";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Cascade);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteLineage_args(");
      bool __first = true;
      if (__isset.lineageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LineageId: ");
        __sb.Append(LineageId);
      }
      if (__isset.cascade) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cascade: ");
        __sb.Append(Cascade);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteLineage_result : TBase
  {
    private bool _success;
    private AlluxioTException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public deleteLineage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteLineage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteLineage_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLineageInfoList_args : TBase
  {

    public getLineageInfoList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLineageInfoList_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLineageInfoList_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLineageInfoList_result : TBase
  {
    private List<LineageInfo> _success;

    public List<LineageInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getLineageInfoList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<LineageInfo>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    LineageInfo _elem26;
                    _elem26 = new LineageInfo();
                    _elem26.Read(iprot);
                    Success.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLineageInfoList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (LineageInfo _iter27 in Success)
              {
                _iter27.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLineageInfoList_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reinitializeFile_args : TBase
  {
    private string _path;
    private long _blockSizeBytes;
    private long _ttl;

    /// <summary>
    /// the path of the file
    /// </summary>
    public string Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        this._path = value;
      }
    }

    /// <summary>
    /// block size in bytes
    /// </summary>
    public long BlockSizeBytes
    {
      get
      {
        return _blockSizeBytes;
      }
      set
      {
        __isset.blockSizeBytes = true;
        this._blockSizeBytes = value;
      }
    }

    /// <summary>
    /// time to live
    /// </summary>
    public long Ttl
    {
      get
      {
        return _ttl;
      }
      set
      {
        __isset.ttl = true;
        this._ttl = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool path;
      public bool blockSizeBytes;
      public bool ttl;
    }

    public reinitializeFile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                BlockSizeBytes = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Ttl = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reinitializeFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        if (__isset.blockSizeBytes) {
          field.Name = "blockSizeBytes";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(BlockSizeBytes);
          oprot.WriteFieldEnd();
        }
        if (__isset.ttl) {
          field.Name = "ttl";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Ttl);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reinitializeFile_args(");
      bool __first = true;
      if (Path != null && __isset.path) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Path: ");
        __sb.Append(Path);
      }
      if (__isset.blockSizeBytes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BlockSizeBytes: ");
        __sb.Append(BlockSizeBytes);
      }
      if (__isset.ttl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ttl: ");
        __sb.Append(Ttl);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reinitializeFile_result : TBase
  {
    private long _success;
    private AlluxioTException _e;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public reinitializeFile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reinitializeFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reinitializeFile_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportLostFile_args : TBase
  {
    private string _path;

    /// <summary>
    /// the path of the file
    /// </summary>
    public string Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        this._path = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool path;
    }

    public reportLostFile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Path = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportLostFile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Path != null && __isset.path) {
          field.Name = "path";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Path);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportLostFile_args(");
      bool __first = true;
      if (Path != null && __isset.path) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Path: ");
        __sb.Append(Path);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportLostFile_result : TBase
  {
    private AlluxioTException _e;

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public reportLostFile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportLostFile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportLostFile_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
