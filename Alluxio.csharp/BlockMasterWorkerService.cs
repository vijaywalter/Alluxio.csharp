/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class BlockMasterWorkerService {
  /// <summary>
  /// This interface contains block master service endpoints for Alluxio workers.
  /// </summary>
  public interface Iface : AlluxioService.Iface {
    /// <summary>
    /// Marks the given block as committed.
    /// </summary>
    /// <param name="workerId">the id of the worker</param>
    /// <param name="usedBytesOnTier">the space used in bytes on the target tier</param>
    /// <param name="tierAlias">the alias of the target tier</param>
    /// <param name="blockId">the id of the block being committed</param>
    /// <param name="length">the length of the block being committed</param>
    void commitBlock(long workerId, long usedBytesOnTier, string tierAlias, long blockId, long length);
    #if SILVERLIGHT
    IAsyncResult Begin_commitBlock(AsyncCallback callback, object state, long workerId, long usedBytesOnTier, string tierAlias, long blockId, long length);
    void End_commitBlock(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns a worker id for the given network address.
    /// </summary>
    /// <param name="workerNetAddress">the worker network address</param>
    long getWorkerId(WorkerNetAddress workerNetAddress);
    #if SILVERLIGHT
    IAsyncResult Begin_getWorkerId(AsyncCallback callback, object state, WorkerNetAddress workerNetAddress);
    long End_getWorkerId(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Periodic worker heartbeat returns an optional command for the worker to execute.
    /// </summary>
    /// <param name="workerId">the id of the worker</param>
    /// <param name="usedBytesOnTiers">the map of space used in bytes on all tiers</param>
    /// <param name="removedBlockIds">the list of removed block ids</param>
    /// <param name="addedBlocksOnTiers">the map of added blocks on all tiers</param>
    Command heartbeat(long workerId, Dictionary<string, long> usedBytesOnTiers, List<long> removedBlockIds, Dictionary<string, List<long>> addedBlocksOnTiers);
    #if SILVERLIGHT
    IAsyncResult Begin_heartbeat(AsyncCallback callback, object state, long workerId, Dictionary<string, long> usedBytesOnTiers, List<long> removedBlockIds, Dictionary<string, List<long>> addedBlocksOnTiers);
    Command End_heartbeat(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Registers a worker.
    /// </summary>
    /// <param name="workerId">the id of the worker</param>
    /// <param name="storageTiers">the list of storage tiers</param>
    /// <param name="totalBytesOnTiers">the map of total bytes on each tier</param>
    /// <param name="usedBytesOnTiers">the map of used bytes on each tier</param>
    /// <param name="currentBlocksOnTiers">the map of list of blocks on each tier</param>
    void registerWorker(long workerId, List<string> storageTiers, Dictionary<string, long> totalBytesOnTiers, Dictionary<string, long> usedBytesOnTiers, Dictionary<string, List<long>> currentBlocksOnTiers);
    #if SILVERLIGHT
    IAsyncResult Begin_registerWorker(AsyncCallback callback, object state, long workerId, List<string> storageTiers, Dictionary<string, long> totalBytesOnTiers, Dictionary<string, long> usedBytesOnTiers, Dictionary<string, List<long>> currentBlocksOnTiers);
    void End_registerWorker(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// This interface contains block master service endpoints for Alluxio workers.
  /// </summary>
  public class Client : AlluxioService.Client, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
    {
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_commitBlock(AsyncCallback callback, object state, long workerId, long usedBytesOnTier, string tierAlias, long blockId, long length)
    {
      return send_commitBlock(callback, state, workerId, usedBytesOnTier, tierAlias, blockId, length);
    }

    public void End_commitBlock(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_commitBlock();
    }

    #endif

    /// <summary>
    /// Marks the given block as committed.
    /// </summary>
    /// <param name="workerId">the id of the worker</param>
    /// <param name="usedBytesOnTier">the space used in bytes on the target tier</param>
    /// <param name="tierAlias">the alias of the target tier</param>
    /// <param name="blockId">the id of the block being committed</param>
    /// <param name="length">the length of the block being committed</param>
    public void commitBlock(long workerId, long usedBytesOnTier, string tierAlias, long blockId, long length)
    {
      #if !SILVERLIGHT
      send_commitBlock(workerId, usedBytesOnTier, tierAlias, blockId, length);
      recv_commitBlock();

      #else
      var asyncResult = Begin_commitBlock(null, null, workerId, usedBytesOnTier, tierAlias, blockId, length);
      End_commitBlock(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_commitBlock(AsyncCallback callback, object state, long workerId, long usedBytesOnTier, string tierAlias, long blockId, long length)
    #else
    public void send_commitBlock(long workerId, long usedBytesOnTier, string tierAlias, long blockId, long length)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("commitBlock", TMessageType.Call, seqid_));
      commitBlock_args args = new commitBlock_args();
      args.WorkerId = workerId;
      args.UsedBytesOnTier = usedBytesOnTier;
      args.TierAlias = tierAlias;
      args.BlockId = blockId;
      args.Length = length;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_commitBlock()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      commitBlock_result result = new commitBlock_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getWorkerId(AsyncCallback callback, object state, WorkerNetAddress workerNetAddress)
    {
      return send_getWorkerId(callback, state, workerNetAddress);
    }

    public long End_getWorkerId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getWorkerId();
    }

    #endif

    /// <summary>
    /// Returns a worker id for the given network address.
    /// </summary>
    /// <param name="workerNetAddress">the worker network address</param>
    public long getWorkerId(WorkerNetAddress workerNetAddress)
    {
      #if !SILVERLIGHT
      send_getWorkerId(workerNetAddress);
      return recv_getWorkerId();

      #else
      var asyncResult = Begin_getWorkerId(null, null, workerNetAddress);
      return End_getWorkerId(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getWorkerId(AsyncCallback callback, object state, WorkerNetAddress workerNetAddress)
    #else
    public void send_getWorkerId(WorkerNetAddress workerNetAddress)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getWorkerId", TMessageType.Call, seqid_));
      getWorkerId_args args = new getWorkerId_args();
      args.WorkerNetAddress = workerNetAddress;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public long recv_getWorkerId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getWorkerId_result result = new getWorkerId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getWorkerId failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_heartbeat(AsyncCallback callback, object state, long workerId, Dictionary<string, long> usedBytesOnTiers, List<long> removedBlockIds, Dictionary<string, List<long>> addedBlocksOnTiers)
    {
      return send_heartbeat(callback, state, workerId, usedBytesOnTiers, removedBlockIds, addedBlocksOnTiers);
    }

    public Command End_heartbeat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_heartbeat();
    }

    #endif

    /// <summary>
    /// Periodic worker heartbeat returns an optional command for the worker to execute.
    /// </summary>
    /// <param name="workerId">the id of the worker</param>
    /// <param name="usedBytesOnTiers">the map of space used in bytes on all tiers</param>
    /// <param name="removedBlockIds">the list of removed block ids</param>
    /// <param name="addedBlocksOnTiers">the map of added blocks on all tiers</param>
    public Command heartbeat(long workerId, Dictionary<string, long> usedBytesOnTiers, List<long> removedBlockIds, Dictionary<string, List<long>> addedBlocksOnTiers)
    {
      #if !SILVERLIGHT
      send_heartbeat(workerId, usedBytesOnTiers, removedBlockIds, addedBlocksOnTiers);
      return recv_heartbeat();

      #else
      var asyncResult = Begin_heartbeat(null, null, workerId, usedBytesOnTiers, removedBlockIds, addedBlocksOnTiers);
      return End_heartbeat(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_heartbeat(AsyncCallback callback, object state, long workerId, Dictionary<string, long> usedBytesOnTiers, List<long> removedBlockIds, Dictionary<string, List<long>> addedBlocksOnTiers)
    #else
    public void send_heartbeat(long workerId, Dictionary<string, long> usedBytesOnTiers, List<long> removedBlockIds, Dictionary<string, List<long>> addedBlocksOnTiers)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("heartbeat", TMessageType.Call, seqid_));
      heartbeat_args args = new heartbeat_args();
      args.WorkerId = workerId;
      args.UsedBytesOnTiers = usedBytesOnTiers;
      args.RemovedBlockIds = removedBlockIds;
      args.AddedBlocksOnTiers = addedBlocksOnTiers;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Command recv_heartbeat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      heartbeat_result result = new heartbeat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "heartbeat failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_registerWorker(AsyncCallback callback, object state, long workerId, List<string> storageTiers, Dictionary<string, long> totalBytesOnTiers, Dictionary<string, long> usedBytesOnTiers, Dictionary<string, List<long>> currentBlocksOnTiers)
    {
      return send_registerWorker(callback, state, workerId, storageTiers, totalBytesOnTiers, usedBytesOnTiers, currentBlocksOnTiers);
    }

    public void End_registerWorker(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_registerWorker();
    }

    #endif

    /// <summary>
    /// Registers a worker.
    /// </summary>
    /// <param name="workerId">the id of the worker</param>
    /// <param name="storageTiers">the list of storage tiers</param>
    /// <param name="totalBytesOnTiers">the map of total bytes on each tier</param>
    /// <param name="usedBytesOnTiers">the map of used bytes on each tier</param>
    /// <param name="currentBlocksOnTiers">the map of list of blocks on each tier</param>
    public void registerWorker(long workerId, List<string> storageTiers, Dictionary<string, long> totalBytesOnTiers, Dictionary<string, long> usedBytesOnTiers, Dictionary<string, List<long>> currentBlocksOnTiers)
    {
      #if !SILVERLIGHT
      send_registerWorker(workerId, storageTiers, totalBytesOnTiers, usedBytesOnTiers, currentBlocksOnTiers);
      recv_registerWorker();

      #else
      var asyncResult = Begin_registerWorker(null, null, workerId, storageTiers, totalBytesOnTiers, usedBytesOnTiers, currentBlocksOnTiers);
      End_registerWorker(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerWorker(AsyncCallback callback, object state, long workerId, List<string> storageTiers, Dictionary<string, long> totalBytesOnTiers, Dictionary<string, long> usedBytesOnTiers, Dictionary<string, List<long>> currentBlocksOnTiers)
    #else
    public void send_registerWorker(long workerId, List<string> storageTiers, Dictionary<string, long> totalBytesOnTiers, Dictionary<string, long> usedBytesOnTiers, Dictionary<string, List<long>> currentBlocksOnTiers)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("registerWorker", TMessageType.Call, seqid_));
      registerWorker_args args = new registerWorker_args();
      args.WorkerId = workerId;
      args.StorageTiers = storageTiers;
      args.TotalBytesOnTiers = totalBytesOnTiers;
      args.UsedBytesOnTiers = usedBytesOnTiers;
      args.CurrentBlocksOnTiers = currentBlocksOnTiers;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_registerWorker()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerWorker_result result = new registerWorker_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

  }
  public class Processor : AlluxioService.Processor, TProcessor {
    public Processor(Iface iface) : base(iface)
    {
      iface_ = iface;
      processMap_["commitBlock"] = commitBlock_Process;
      processMap_["getWorkerId"] = getWorkerId_Process;
      processMap_["heartbeat"] = heartbeat_Process;
      processMap_["registerWorker"] = registerWorker_Process;
    }

    private Iface iface_;

    public new bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void commitBlock_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      commitBlock_args args = new commitBlock_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      commitBlock_result result = new commitBlock_result();
      try {
        iface_.commitBlock(args.WorkerId, args.UsedBytesOnTier, args.TierAlias, args.BlockId, args.Length);
      } catch (AlluxioTException e) {
        result.E = e;
      }
      oprot.WriteMessageBegin(new TMessage("commitBlock", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getWorkerId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getWorkerId_args args = new getWorkerId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getWorkerId_result result = new getWorkerId_result();
      result.Success = iface_.getWorkerId(args.WorkerNetAddress);
      oprot.WriteMessageBegin(new TMessage("getWorkerId", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void heartbeat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      heartbeat_args args = new heartbeat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      heartbeat_result result = new heartbeat_result();
      result.Success = iface_.heartbeat(args.WorkerId, args.UsedBytesOnTiers, args.RemovedBlockIds, args.AddedBlocksOnTiers);
      oprot.WriteMessageBegin(new TMessage("heartbeat", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerWorker_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerWorker_args args = new registerWorker_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerWorker_result result = new registerWorker_result();
      try {
        iface_.registerWorker(args.WorkerId, args.StorageTiers, args.TotalBytesOnTiers, args.UsedBytesOnTiers, args.CurrentBlocksOnTiers);
      } catch (AlluxioTException e) {
        result.E = e;
      }
      oprot.WriteMessageBegin(new TMessage("registerWorker", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class commitBlock_args : TBase
  {
    private long _workerId;
    private long _usedBytesOnTier;
    private string _tierAlias;
    private long _blockId;
    private long _length;

    /// <summary>
    /// the id of the worker
    /// </summary>
    public long WorkerId
    {
      get
      {
        return _workerId;
      }
      set
      {
        __isset.workerId = true;
        this._workerId = value;
      }
    }

    /// <summary>
    /// the space used in bytes on the target tier
    /// </summary>
    public long UsedBytesOnTier
    {
      get
      {
        return _usedBytesOnTier;
      }
      set
      {
        __isset.usedBytesOnTier = true;
        this._usedBytesOnTier = value;
      }
    }

    /// <summary>
    /// the alias of the target tier
    /// </summary>
    public string TierAlias
    {
      get
      {
        return _tierAlias;
      }
      set
      {
        __isset.tierAlias = true;
        this._tierAlias = value;
      }
    }

    /// <summary>
    /// the id of the block being committed
    /// </summary>
    public long BlockId
    {
      get
      {
        return _blockId;
      }
      set
      {
        __isset.blockId = true;
        this._blockId = value;
      }
    }

    /// <summary>
    /// the length of the block being committed
    /// </summary>
    public long Length
    {
      get
      {
        return _length;
      }
      set
      {
        __isset.length = true;
        this._length = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool workerId;
      public bool usedBytesOnTier;
      public bool tierAlias;
      public bool blockId;
      public bool length;
    }

    public commitBlock_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                WorkerId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                UsedBytesOnTier = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TierAlias = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                BlockId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                Length = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("commitBlock_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.workerId) {
          field.Name = "workerId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(WorkerId);
          oprot.WriteFieldEnd();
        }
        if (__isset.usedBytesOnTier) {
          field.Name = "usedBytesOnTier";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UsedBytesOnTier);
          oprot.WriteFieldEnd();
        }
        if (TierAlias != null && __isset.tierAlias) {
          field.Name = "tierAlias";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TierAlias);
          oprot.WriteFieldEnd();
        }
        if (__isset.blockId) {
          field.Name = "blockId";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(BlockId);
          oprot.WriteFieldEnd();
        }
        if (__isset.length) {
          field.Name = "length";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Length);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("commitBlock_args(");
      bool __first = true;
      if (__isset.workerId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WorkerId: ");
        __sb.Append(WorkerId);
      }
      if (__isset.usedBytesOnTier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UsedBytesOnTier: ");
        __sb.Append(UsedBytesOnTier);
      }
      if (TierAlias != null && __isset.tierAlias) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TierAlias: ");
        __sb.Append(TierAlias);
      }
      if (__isset.blockId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BlockId: ");
        __sb.Append(BlockId);
      }
      if (__isset.length) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Length: ");
        __sb.Append(Length);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class commitBlock_result : TBase
  {
    private AlluxioTException _e;

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public commitBlock_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("commitBlock_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("commitBlock_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getWorkerId_args : TBase
  {
    private WorkerNetAddress _workerNetAddress;

    /// <summary>
    /// the worker network address
    /// </summary>
    public WorkerNetAddress WorkerNetAddress
    {
      get
      {
        return _workerNetAddress;
      }
      set
      {
        __isset.workerNetAddress = true;
        this._workerNetAddress = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool workerNetAddress;
    }

    public getWorkerId_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                WorkerNetAddress = new WorkerNetAddress();
                WorkerNetAddress.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getWorkerId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (WorkerNetAddress != null && __isset.workerNetAddress) {
          field.Name = "workerNetAddress";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          WorkerNetAddress.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getWorkerId_args(");
      bool __first = true;
      if (WorkerNetAddress != null && __isset.workerNetAddress) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WorkerNetAddress: ");
        __sb.Append(WorkerNetAddress== null ? "<null>" : WorkerNetAddress.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getWorkerId_result : TBase
  {
    private long _success;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getWorkerId_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getWorkerId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getWorkerId_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class heartbeat_args : TBase
  {
    private long _workerId;
    private Dictionary<string, long> _usedBytesOnTiers;
    private List<long> _removedBlockIds;
    private Dictionary<string, List<long>> _addedBlocksOnTiers;

    /// <summary>
    /// the id of the worker
    /// </summary>
    public long WorkerId
    {
      get
      {
        return _workerId;
      }
      set
      {
        __isset.workerId = true;
        this._workerId = value;
      }
    }

    /// <summary>
    /// the map of space used in bytes on all tiers
    /// </summary>
    public Dictionary<string, long> UsedBytesOnTiers
    {
      get
      {
        return _usedBytesOnTiers;
      }
      set
      {
        __isset.usedBytesOnTiers = true;
        this._usedBytesOnTiers = value;
      }
    }

    /// <summary>
    /// the list of removed block ids
    /// </summary>
    public List<long> RemovedBlockIds
    {
      get
      {
        return _removedBlockIds;
      }
      set
      {
        __isset.removedBlockIds = true;
        this._removedBlockIds = value;
      }
    }

    /// <summary>
    /// the map of added blocks on all tiers
    /// </summary>
    public Dictionary<string, List<long>> AddedBlocksOnTiers
    {
      get
      {
        return _addedBlocksOnTiers;
      }
      set
      {
        __isset.addedBlocksOnTiers = true;
        this._addedBlocksOnTiers = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool workerId;
      public bool usedBytesOnTiers;
      public bool removedBlockIds;
      public bool addedBlocksOnTiers;
    }

    public heartbeat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                WorkerId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  UsedBytesOnTiers = new Dictionary<string, long>();
                  TMap _map4 = iprot.ReadMapBegin();
                  for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                  {
                    string _key6;
                    long _val7;
                    _key6 = iprot.ReadString();
                    _val7 = iprot.ReadI64();
                    UsedBytesOnTiers[_key6] = _val7;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  RemovedBlockIds = new List<long>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    long _elem10;
                    _elem10 = iprot.ReadI64();
                    RemovedBlockIds.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Map) {
                {
                  AddedBlocksOnTiers = new Dictionary<string, List<long>>();
                  TMap _map11 = iprot.ReadMapBegin();
                  for( int _i12 = 0; _i12 < _map11.Count; ++_i12)
                  {
                    string _key13;
                    List<long> _val14;
                    _key13 = iprot.ReadString();
                    {
                      _val14 = new List<long>();
                      TList _list15 = iprot.ReadListBegin();
                      for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                      {
                        long _elem17;
                        _elem17 = iprot.ReadI64();
                        _val14.Add(_elem17);
                      }
                      iprot.ReadListEnd();
                    }
                    AddedBlocksOnTiers[_key13] = _val14;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("heartbeat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.workerId) {
          field.Name = "workerId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(WorkerId);
          oprot.WriteFieldEnd();
        }
        if (UsedBytesOnTiers != null && __isset.usedBytesOnTiers) {
          field.Name = "usedBytesOnTiers";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I64, UsedBytesOnTiers.Count));
            foreach (string _iter18 in UsedBytesOnTiers.Keys)
            {
              oprot.WriteString(_iter18);
              oprot.WriteI64(UsedBytesOnTiers[_iter18]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (RemovedBlockIds != null && __isset.removedBlockIds) {
          field.Name = "removedBlockIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I64, RemovedBlockIds.Count));
            foreach (long _iter19 in RemovedBlockIds)
            {
              oprot.WriteI64(_iter19);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (AddedBlocksOnTiers != null && __isset.addedBlocksOnTiers) {
          field.Name = "addedBlocksOnTiers";
          field.Type = TType.Map;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.List, AddedBlocksOnTiers.Count));
            foreach (string _iter20 in AddedBlocksOnTiers.Keys)
            {
              oprot.WriteString(_iter20);
              {
                oprot.WriteListBegin(new TList(TType.I64, AddedBlocksOnTiers[_iter20].Count));
                foreach (long _iter21 in AddedBlocksOnTiers[_iter20])
                {
                  oprot.WriteI64(_iter21);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("heartbeat_args(");
      bool __first = true;
      if (__isset.workerId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WorkerId: ");
        __sb.Append(WorkerId);
      }
      if (UsedBytesOnTiers != null && __isset.usedBytesOnTiers) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UsedBytesOnTiers: ");
        __sb.Append(UsedBytesOnTiers);
      }
      if (RemovedBlockIds != null && __isset.removedBlockIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RemovedBlockIds: ");
        __sb.Append(RemovedBlockIds);
      }
      if (AddedBlocksOnTiers != null && __isset.addedBlocksOnTiers) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AddedBlocksOnTiers: ");
        __sb.Append(AddedBlocksOnTiers);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class heartbeat_result : TBase
  {
    private Command _success;

    public Command Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public heartbeat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Command();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("heartbeat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("heartbeat_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWorker_args : TBase
  {
    private long _workerId;
    private List<string> _storageTiers;
    private Dictionary<string, long> _totalBytesOnTiers;
    private Dictionary<string, long> _usedBytesOnTiers;
    private Dictionary<string, List<long>> _currentBlocksOnTiers;

    /// <summary>
    /// the id of the worker
    /// </summary>
    public long WorkerId
    {
      get
      {
        return _workerId;
      }
      set
      {
        __isset.workerId = true;
        this._workerId = value;
      }
    }

    /// <summary>
    /// the list of storage tiers
    /// </summary>
    public List<string> StorageTiers
    {
      get
      {
        return _storageTiers;
      }
      set
      {
        __isset.storageTiers = true;
        this._storageTiers = value;
      }
    }

    /// <summary>
    /// the map of total bytes on each tier
    /// </summary>
    public Dictionary<string, long> TotalBytesOnTiers
    {
      get
      {
        return _totalBytesOnTiers;
      }
      set
      {
        __isset.totalBytesOnTiers = true;
        this._totalBytesOnTiers = value;
      }
    }

    /// <summary>
    /// the map of used bytes on each tier
    /// </summary>
    public Dictionary<string, long> UsedBytesOnTiers
    {
      get
      {
        return _usedBytesOnTiers;
      }
      set
      {
        __isset.usedBytesOnTiers = true;
        this._usedBytesOnTiers = value;
      }
    }

    /// <summary>
    /// the map of list of blocks on each tier
    /// </summary>
    public Dictionary<string, List<long>> CurrentBlocksOnTiers
    {
      get
      {
        return _currentBlocksOnTiers;
      }
      set
      {
        __isset.currentBlocksOnTiers = true;
        this._currentBlocksOnTiers = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool workerId;
      public bool storageTiers;
      public bool totalBytesOnTiers;
      public bool usedBytesOnTiers;
      public bool currentBlocksOnTiers;
    }

    public registerWorker_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                WorkerId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  StorageTiers = new List<string>();
                  TList _list22 = iprot.ReadListBegin();
                  for( int _i23 = 0; _i23 < _list22.Count; ++_i23)
                  {
                    string _elem24;
                    _elem24 = iprot.ReadString();
                    StorageTiers.Add(_elem24);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  TotalBytesOnTiers = new Dictionary<string, long>();
                  TMap _map25 = iprot.ReadMapBegin();
                  for( int _i26 = 0; _i26 < _map25.Count; ++_i26)
                  {
                    string _key27;
                    long _val28;
                    _key27 = iprot.ReadString();
                    _val28 = iprot.ReadI64();
                    TotalBytesOnTiers[_key27] = _val28;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Map) {
                {
                  UsedBytesOnTiers = new Dictionary<string, long>();
                  TMap _map29 = iprot.ReadMapBegin();
                  for( int _i30 = 0; _i30 < _map29.Count; ++_i30)
                  {
                    string _key31;
                    long _val32;
                    _key31 = iprot.ReadString();
                    _val32 = iprot.ReadI64();
                    UsedBytesOnTiers[_key31] = _val32;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Map) {
                {
                  CurrentBlocksOnTiers = new Dictionary<string, List<long>>();
                  TMap _map33 = iprot.ReadMapBegin();
                  for( int _i34 = 0; _i34 < _map33.Count; ++_i34)
                  {
                    string _key35;
                    List<long> _val36;
                    _key35 = iprot.ReadString();
                    {
                      _val36 = new List<long>();
                      TList _list37 = iprot.ReadListBegin();
                      for( int _i38 = 0; _i38 < _list37.Count; ++_i38)
                      {
                        long _elem39;
                        _elem39 = iprot.ReadI64();
                        _val36.Add(_elem39);
                      }
                      iprot.ReadListEnd();
                    }
                    CurrentBlocksOnTiers[_key35] = _val36;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWorker_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.workerId) {
          field.Name = "workerId";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(WorkerId);
          oprot.WriteFieldEnd();
        }
        if (StorageTiers != null && __isset.storageTiers) {
          field.Name = "storageTiers";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, StorageTiers.Count));
            foreach (string _iter40 in StorageTiers)
            {
              oprot.WriteString(_iter40);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (TotalBytesOnTiers != null && __isset.totalBytesOnTiers) {
          field.Name = "totalBytesOnTiers";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I64, TotalBytesOnTiers.Count));
            foreach (string _iter41 in TotalBytesOnTiers.Keys)
            {
              oprot.WriteString(_iter41);
              oprot.WriteI64(TotalBytesOnTiers[_iter41]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (UsedBytesOnTiers != null && __isset.usedBytesOnTiers) {
          field.Name = "usedBytesOnTiers";
          field.Type = TType.Map;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I64, UsedBytesOnTiers.Count));
            foreach (string _iter42 in UsedBytesOnTiers.Keys)
            {
              oprot.WriteString(_iter42);
              oprot.WriteI64(UsedBytesOnTiers[_iter42]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (CurrentBlocksOnTiers != null && __isset.currentBlocksOnTiers) {
          field.Name = "currentBlocksOnTiers";
          field.Type = TType.Map;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.List, CurrentBlocksOnTiers.Count));
            foreach (string _iter43 in CurrentBlocksOnTiers.Keys)
            {
              oprot.WriteString(_iter43);
              {
                oprot.WriteListBegin(new TList(TType.I64, CurrentBlocksOnTiers[_iter43].Count));
                foreach (long _iter44 in CurrentBlocksOnTiers[_iter43])
                {
                  oprot.WriteI64(_iter44);
                }
                oprot.WriteListEnd();
              }
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWorker_args(");
      bool __first = true;
      if (__isset.workerId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WorkerId: ");
        __sb.Append(WorkerId);
      }
      if (StorageTiers != null && __isset.storageTiers) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StorageTiers: ");
        __sb.Append(StorageTiers);
      }
      if (TotalBytesOnTiers != null && __isset.totalBytesOnTiers) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TotalBytesOnTiers: ");
        __sb.Append(TotalBytesOnTiers);
      }
      if (UsedBytesOnTiers != null && __isset.usedBytesOnTiers) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UsedBytesOnTiers: ");
        __sb.Append(UsedBytesOnTiers);
      }
      if (CurrentBlocksOnTiers != null && __isset.currentBlocksOnTiers) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CurrentBlocksOnTiers: ");
        __sb.Append(CurrentBlocksOnTiers);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWorker_result : TBase
  {
    private AlluxioTException _e;

    public AlluxioTException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public registerWorker_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new AlluxioTException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWorker_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWorker_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
