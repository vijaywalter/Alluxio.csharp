/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class LineageInfo : TBase
{
  private long _id;
  private List<string> _inputFiles;
  private List<string> _outputFiles;
  private CommandLineJobInfo _job;
  private long _creationTimeMs;
  private List<long> _parents;
  private List<long> _children;

  public long Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public List<string> InputFiles
  {
    get
    {
      return _inputFiles;
    }
    set
    {
      __isset.inputFiles = true;
      this._inputFiles = value;
    }
  }

  public List<string> OutputFiles
  {
    get
    {
      return _outputFiles;
    }
    set
    {
      __isset.outputFiles = true;
      this._outputFiles = value;
    }
  }

  public CommandLineJobInfo Job
  {
    get
    {
      return _job;
    }
    set
    {
      __isset.job = true;
      this._job = value;
    }
  }

  public long CreationTimeMs
  {
    get
    {
      return _creationTimeMs;
    }
    set
    {
      __isset.creationTimeMs = true;
      this._creationTimeMs = value;
    }
  }

  public List<long> Parents
  {
    get
    {
      return _parents;
    }
    set
    {
      __isset.parents = true;
      this._parents = value;
    }
  }

  public List<long> Children
  {
    get
    {
      return _children;
    }
    set
    {
      __isset.children = true;
      this._children = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool inputFiles;
    public bool outputFiles;
    public bool job;
    public bool creationTimeMs;
    public bool parents;
    public bool children;
  }

  public LineageInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Id = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                InputFiles = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2;
                  _elem2 = iprot.ReadString();
                  InputFiles.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                OutputFiles = new List<string>();
                TList _list3 = iprot.ReadListBegin();
                for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  string _elem5;
                  _elem5 = iprot.ReadString();
                  OutputFiles.Add(_elem5);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Job = new CommandLineJobInfo();
              Job.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              CreationTimeMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                Parents = new List<long>();
                TList _list6 = iprot.ReadListBegin();
                for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  long _elem8;
                  _elem8 = iprot.ReadI64();
                  Parents.Add(_elem8);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                Children = new List<long>();
                TList _list9 = iprot.ReadListBegin();
                for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                {
                  long _elem11;
                  _elem11 = iprot.ReadI64();
                  Children.Add(_elem11);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("LineageInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
      }
      if (InputFiles != null && __isset.inputFiles) {
        field.Name = "inputFiles";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, InputFiles.Count));
          foreach (string _iter12 in InputFiles)
          {
            oprot.WriteString(_iter12);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (OutputFiles != null && __isset.outputFiles) {
        field.Name = "outputFiles";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, OutputFiles.Count));
          foreach (string _iter13 in OutputFiles)
          {
            oprot.WriteString(_iter13);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Job != null && __isset.job) {
        field.Name = "job";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Job.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.creationTimeMs) {
        field.Name = "creationTimeMs";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreationTimeMs);
        oprot.WriteFieldEnd();
      }
      if (Parents != null && __isset.parents) {
        field.Name = "parents";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, Parents.Count));
          foreach (long _iter14 in Parents)
          {
            oprot.WriteI64(_iter14);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Children != null && __isset.children) {
        field.Name = "children";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, Children.Count));
          foreach (long _iter15 in Children)
          {
            oprot.WriteI64(_iter15);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("LineageInfo(");
    bool __first = true;
    if (__isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (InputFiles != null && __isset.inputFiles) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("InputFiles: ");
      __sb.Append(InputFiles);
    }
    if (OutputFiles != null && __isset.outputFiles) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OutputFiles: ");
      __sb.Append(OutputFiles);
    }
    if (Job != null && __isset.job) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Job: ");
      __sb.Append(Job== null ? "<null>" : Job.ToString());
    }
    if (__isset.creationTimeMs) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CreationTimeMs: ");
      __sb.Append(CreationTimeMs);
    }
    if (Parents != null && __isset.parents) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Parents: ");
      __sb.Append(Parents);
    }
    if (Children != null && __isset.children) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Children: ");
      __sb.Append(Children);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

