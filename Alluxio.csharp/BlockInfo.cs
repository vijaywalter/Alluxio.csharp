/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


/// <summary>
/// Contains the information of a block in Alluxio. It maintains the worker nodes where the replicas
/// of the blocks are stored.
/// </summary>
#if !SILVERLIGHT
[Serializable]
#endif
public partial class BlockInfo : TBase
{
  private long _blockId;
  private long _length;
  private List<BlockLocation> _locations;

  public long BlockId
  {
    get
    {
      return _blockId;
    }
    set
    {
      __isset.blockId = true;
      this._blockId = value;
    }
  }

  public long Length
  {
    get
    {
      return _length;
    }
    set
    {
      __isset.length = true;
      this._length = value;
    }
  }

  public List<BlockLocation> Locations
  {
    get
    {
      return _locations;
    }
    set
    {
      __isset.locations = true;
      this._locations = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool blockId;
    public bool length;
    public bool locations;
  }

  public BlockInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              BlockId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Length = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Locations = new List<BlockLocation>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  BlockLocation _elem2;
                  _elem2 = new BlockLocation();
                  _elem2.Read(iprot);
                  Locations.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("BlockInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.blockId) {
        field.Name = "blockId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BlockId);
        oprot.WriteFieldEnd();
      }
      if (__isset.length) {
        field.Name = "length";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Length);
        oprot.WriteFieldEnd();
      }
      if (Locations != null && __isset.locations) {
        field.Name = "locations";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Locations.Count));
          foreach (BlockLocation _iter3 in Locations)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("BlockInfo(");
    bool __first = true;
    if (__isset.blockId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("BlockId: ");
      __sb.Append(BlockId);
    }
    if (__isset.length) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Length: ");
      __sb.Append(Length);
    }
    if (Locations != null && __isset.locations) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Locations: ");
      __sb.Append(Locations);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

