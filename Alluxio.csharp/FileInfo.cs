/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class FileInfo : TBase
{
  private long _fileId;
  private string _name;
  private string _path;
  private string _ufsPath;
  private long _length;
  private long _blockSizeBytes;
  private long _creationTimeMs;
  private bool _completed;
  private bool _folder;
  private bool _pinned;
  private bool _cacheable;
  private bool _persisted;
  private List<long> _blockIds;
  private int _inMemoryPercentage;
  private long _lastModificationTimeMs;
  private long _ttl;
  private string _owner;
  private string _group;
  private int _mode;
  private string _persistenceState;
  private bool _mountPoint;
  private List<FileBlockInfo> _fileBlockInfos;

  public long FileId
  {
    get
    {
      return _fileId;
    }
    set
    {
      __isset.fileId = true;
      this._fileId = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Path
  {
    get
    {
      return _path;
    }
    set
    {
      __isset.path = true;
      this._path = value;
    }
  }

  public string UfsPath
  {
    get
    {
      return _ufsPath;
    }
    set
    {
      __isset.ufsPath = true;
      this._ufsPath = value;
    }
  }

  public long Length
  {
    get
    {
      return _length;
    }
    set
    {
      __isset.length = true;
      this._length = value;
    }
  }

  public long BlockSizeBytes
  {
    get
    {
      return _blockSizeBytes;
    }
    set
    {
      __isset.blockSizeBytes = true;
      this._blockSizeBytes = value;
    }
  }

  public long CreationTimeMs
  {
    get
    {
      return _creationTimeMs;
    }
    set
    {
      __isset.creationTimeMs = true;
      this._creationTimeMs = value;
    }
  }

  public bool Completed
  {
    get
    {
      return _completed;
    }
    set
    {
      __isset.completed = true;
      this._completed = value;
    }
  }

  public bool Folder
  {
    get
    {
      return _folder;
    }
    set
    {
      __isset.folder = true;
      this._folder = value;
    }
  }

  public bool Pinned
  {
    get
    {
      return _pinned;
    }
    set
    {
      __isset.pinned = true;
      this._pinned = value;
    }
  }

  public bool Cacheable
  {
    get
    {
      return _cacheable;
    }
    set
    {
      __isset.cacheable = true;
      this._cacheable = value;
    }
  }

  public bool Persisted
  {
    get
    {
      return _persisted;
    }
    set
    {
      __isset.persisted = true;
      this._persisted = value;
    }
  }

  public List<long> BlockIds
  {
    get
    {
      return _blockIds;
    }
    set
    {
      __isset.blockIds = true;
      this._blockIds = value;
    }
  }

  public int InMemoryPercentage
  {
    get
    {
      return _inMemoryPercentage;
    }
    set
    {
      __isset.inMemoryPercentage = true;
      this._inMemoryPercentage = value;
    }
  }

  public long LastModificationTimeMs
  {
    get
    {
      return _lastModificationTimeMs;
    }
    set
    {
      __isset.lastModificationTimeMs = true;
      this._lastModificationTimeMs = value;
    }
  }

  public long Ttl
  {
    get
    {
      return _ttl;
    }
    set
    {
      __isset.ttl = true;
      this._ttl = value;
    }
  }

  public string Owner
  {
    get
    {
      return _owner;
    }
    set
    {
      __isset.owner = true;
      this._owner = value;
    }
  }

  public string Group
  {
    get
    {
      return _group;
    }
    set
    {
      __isset.@group = true;
      this._group = value;
    }
  }

  public int Mode
  {
    get
    {
      return _mode;
    }
    set
    {
      __isset.mode = true;
      this._mode = value;
    }
  }

  public string PersistenceState
  {
    get
    {
      return _persistenceState;
    }
    set
    {
      __isset.persistenceState = true;
      this._persistenceState = value;
    }
  }

  public bool MountPoint
  {
    get
    {
      return _mountPoint;
    }
    set
    {
      __isset.mountPoint = true;
      this._mountPoint = value;
    }
  }

  public List<FileBlockInfo> FileBlockInfos
  {
    get
    {
      return _fileBlockInfos;
    }
    set
    {
      __isset.fileBlockInfos = true;
      this._fileBlockInfos = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool fileId;
    public bool name;
    public bool path;
    public bool ufsPath;
    public bool length;
    public bool blockSizeBytes;
    public bool creationTimeMs;
    public bool completed;
    public bool folder;
    public bool pinned;
    public bool cacheable;
    public bool persisted;
    public bool blockIds;
    public bool inMemoryPercentage;
    public bool lastModificationTimeMs;
    public bool ttl;
    public bool owner;
    public bool @group;
    public bool mode;
    public bool persistenceState;
    public bool mountPoint;
    public bool fileBlockInfos;
  }

  public FileInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              FileId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Path = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              UfsPath = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              Length = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              BlockSizeBytes = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              CreationTimeMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              Completed = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Bool) {
              Folder = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              Pinned = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Bool) {
              Cacheable = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Bool) {
              Persisted = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                BlockIds = new List<long>();
                TList _list13 = iprot.ReadListBegin();
                for( int _i14 = 0; _i14 < _list13.Count; ++_i14)
                {
                  long _elem15;
                  _elem15 = iprot.ReadI64();
                  BlockIds.Add(_elem15);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              InMemoryPercentage = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I64) {
              LastModificationTimeMs = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.I64) {
              Ttl = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.String) {
              Owner = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.String) {
              Group = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              Mode = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.String) {
              PersistenceState = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Bool) {
              MountPoint = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.List) {
              {
                FileBlockInfos = new List<FileBlockInfo>();
                TList _list16 = iprot.ReadListBegin();
                for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                {
                  FileBlockInfo _elem18;
                  _elem18 = new FileBlockInfo();
                  _elem18.Read(iprot);
                  FileBlockInfos.Add(_elem18);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("FileInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.fileId) {
        field.Name = "fileId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(FileId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Path != null && __isset.path) {
        field.Name = "path";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Path);
        oprot.WriteFieldEnd();
      }
      if (UfsPath != null && __isset.ufsPath) {
        field.Name = "ufsPath";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UfsPath);
        oprot.WriteFieldEnd();
      }
      if (__isset.length) {
        field.Name = "length";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Length);
        oprot.WriteFieldEnd();
      }
      if (__isset.blockSizeBytes) {
        field.Name = "blockSizeBytes";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BlockSizeBytes);
        oprot.WriteFieldEnd();
      }
      if (__isset.creationTimeMs) {
        field.Name = "creationTimeMs";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreationTimeMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.completed) {
        field.Name = "completed";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Completed);
        oprot.WriteFieldEnd();
      }
      if (__isset.folder) {
        field.Name = "folder";
        field.Type = TType.Bool;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Folder);
        oprot.WriteFieldEnd();
      }
      if (__isset.pinned) {
        field.Name = "pinned";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Pinned);
        oprot.WriteFieldEnd();
      }
      if (__isset.cacheable) {
        field.Name = "cacheable";
        field.Type = TType.Bool;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Cacheable);
        oprot.WriteFieldEnd();
      }
      if (__isset.persisted) {
        field.Name = "persisted";
        field.Type = TType.Bool;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Persisted);
        oprot.WriteFieldEnd();
      }
      if (BlockIds != null && __isset.blockIds) {
        field.Name = "blockIds";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, BlockIds.Count));
          foreach (long _iter19 in BlockIds)
          {
            oprot.WriteI64(_iter19);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.inMemoryPercentage) {
        field.Name = "inMemoryPercentage";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(InMemoryPercentage);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastModificationTimeMs) {
        field.Name = "lastModificationTimeMs";
        field.Type = TType.I64;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastModificationTimeMs);
        oprot.WriteFieldEnd();
      }
      if (__isset.ttl) {
        field.Name = "ttl";
        field.Type = TType.I64;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Ttl);
        oprot.WriteFieldEnd();
      }
      if (Owner != null && __isset.owner) {
        field.Name = "owner";
        field.Type = TType.String;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Owner);
        oprot.WriteFieldEnd();
      }
      if (Group != null && __isset.@group) {
        field.Name = "group";
        field.Type = TType.String;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Group);
        oprot.WriteFieldEnd();
      }
      if (__isset.mode) {
        field.Name = "mode";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Mode);
        oprot.WriteFieldEnd();
      }
      if (PersistenceState != null && __isset.persistenceState) {
        field.Name = "persistenceState";
        field.Type = TType.String;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PersistenceState);
        oprot.WriteFieldEnd();
      }
      if (__isset.mountPoint) {
        field.Name = "mountPoint";
        field.Type = TType.Bool;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(MountPoint);
        oprot.WriteFieldEnd();
      }
      if (FileBlockInfos != null && __isset.fileBlockInfos) {
        field.Name = "fileBlockInfos";
        field.Type = TType.List;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, FileBlockInfos.Count));
          foreach (FileBlockInfo _iter20 in FileBlockInfos)
          {
            _iter20.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("FileInfo(");
    bool __first = true;
    if (__isset.fileId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FileId: ");
      __sb.Append(FileId);
    }
    if (Name != null && __isset.name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Name: ");
      __sb.Append(Name);
    }
    if (Path != null && __isset.path) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Path: ");
      __sb.Append(Path);
    }
    if (UfsPath != null && __isset.ufsPath) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UfsPath: ");
      __sb.Append(UfsPath);
    }
    if (__isset.length) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Length: ");
      __sb.Append(Length);
    }
    if (__isset.blockSizeBytes) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("BlockSizeBytes: ");
      __sb.Append(BlockSizeBytes);
    }
    if (__isset.creationTimeMs) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CreationTimeMs: ");
      __sb.Append(CreationTimeMs);
    }
    if (__isset.completed) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Completed: ");
      __sb.Append(Completed);
    }
    if (__isset.folder) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Folder: ");
      __sb.Append(Folder);
    }
    if (__isset.pinned) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Pinned: ");
      __sb.Append(Pinned);
    }
    if (__isset.cacheable) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Cacheable: ");
      __sb.Append(Cacheable);
    }
    if (__isset.persisted) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Persisted: ");
      __sb.Append(Persisted);
    }
    if (BlockIds != null && __isset.blockIds) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("BlockIds: ");
      __sb.Append(BlockIds);
    }
    if (__isset.inMemoryPercentage) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("InMemoryPercentage: ");
      __sb.Append(InMemoryPercentage);
    }
    if (__isset.lastModificationTimeMs) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LastModificationTimeMs: ");
      __sb.Append(LastModificationTimeMs);
    }
    if (__isset.ttl) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Ttl: ");
      __sb.Append(Ttl);
    }
    if (Owner != null && __isset.owner) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Owner: ");
      __sb.Append(Owner);
    }
    if (Group != null && __isset.@group) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Group: ");
      __sb.Append(Group);
    }
    if (__isset.mode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Mode: ");
      __sb.Append(Mode);
    }
    if (PersistenceState != null && __isset.persistenceState) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PersistenceState: ");
      __sb.Append(PersistenceState);
    }
    if (__isset.mountPoint) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MountPoint: ");
      __sb.Append(MountPoint);
    }
    if (FileBlockInfos != null && __isset.fileBlockInfos) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FileBlockInfos: ");
      __sb.Append(FileBlockInfos);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

